#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ManagementDispatch")]
	public partial class ManagementDispatchDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcount(Acount instance);
    partial void UpdateAcount(Acount instance);
    partial void DeleteAcount(Acount instance);
    partial void InsertWorkingState(WorkingState instance);
    partial void UpdateWorkingState(WorkingState instance);
    partial void DeleteWorkingState(WorkingState instance);
    partial void InsertAcountEmailSentID(AcountEmailSentID instance);
    partial void UpdateAcountEmailSentID(AcountEmailSentID instance);
    partial void DeleteAcountEmailSentID(AcountEmailSentID instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertCalendarWorking(CalendarWorking instance);
    partial void UpdateCalendarWorking(CalendarWorking instance);
    partial void DeleteCalendarWorking(CalendarWorking instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDepartmentAddress(DepartmentAddress instance);
    partial void UpdateDepartmentAddress(DepartmentAddress instance);
    partial void DeleteDepartmentAddress(DepartmentAddress instance);
    partial void InsertDepartmentOfDepartment(DepartmentOfDepartment instance);
    partial void UpdateDepartmentOfDepartment(DepartmentOfDepartment instance);
    partial void DeleteDepartmentOfDepartment(DepartmentOfDepartment instance);
    partial void InsertEmail(Email instance);
    partial void UpdateEmail(Email instance);
    partial void DeleteEmail(Email instance);
    partial void InsertEmailAttachment(EmailAttachment instance);
    partial void UpdateEmailAttachment(EmailAttachment instance);
    partial void DeleteEmailAttachment(EmailAttachment instance);
    partial void InsertEmailInbox(EmailInbox instance);
    partial void UpdateEmailInbox(EmailInbox instance);
    partial void DeleteEmailInbox(EmailInbox instance);
    partial void InsertEmailSent(EmailSent instance);
    partial void UpdateEmailSent(EmailSent instance);
    partial void DeleteEmailSent(EmailSent instance);
    partial void InsertFileAttachment(FileAttachment instance);
    partial void UpdateFileAttachment(FileAttachment instance);
    partial void DeleteFileAttachment(FileAttachment instance);
    partial void InsertGroupUser(GroupUser instance);
    partial void UpdateGroupUser(GroupUser instance);
    partial void DeleteGroupUser(GroupUser instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertOwnerAdmin(OwnerAdmin instance);
    partial void UpdateOwnerAdmin(OwnerAdmin instance);
    partial void DeleteOwnerAdmin(OwnerAdmin instance);
    partial void InsertOwnerCalendar(OwnerCalendar instance);
    partial void UpdateOwnerCalendar(OwnerCalendar instance);
    partial void DeleteOwnerCalendar(OwnerCalendar instance);
    partial void InsertOwnerGroupUser(OwnerGroupUser instance);
    partial void UpdateOwnerGroupUser(OwnerGroupUser instance);
    partial void DeleteOwnerGroupUser(OwnerGroupUser instance);
    partial void InsertOwnerText(OwnerText instance);
    partial void UpdateOwnerText(OwnerText instance);
    partial void DeleteOwnerText(OwnerText instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffGroupUser(StaffGroupUser instance);
    partial void UpdateStaffGroupUser(StaffGroupUser instance);
    partial void DeleteStaffGroupUser(StaffGroupUser instance);
    partial void InsertStateTextTo(StateTextTo instance);
    partial void UpdateStateTextTo(StateTextTo instance);
    partial void DeleteStateTextTo(StateTextTo instance);
    partial void InsertSystemLog(SystemLog instance);
    partial void UpdateSystemLog(SystemLog instance);
    partial void DeleteSystemLog(SystemLog instance);
    partial void InsertText(Text instance);
    partial void UpdateText(Text instance);
    partial void DeleteText(Text instance);
    partial void InsertTextAttachment(TextAttachment instance);
    partial void UpdateTextAttachment(TextAttachment instance);
    partial void DeleteTextAttachment(TextAttachment instance);
    partial void InsertTextInBook(TextInBook instance);
    partial void UpdateTextInBook(TextInBook instance);
    partial void DeleteTextInBook(TextInBook instance);
    partial void InsertTextInbox(TextInbox instance);
    partial void UpdateTextInbox(TextInbox instance);
    partial void DeleteTextInbox(TextInbox instance);
    partial void InsertTextLevel(TextLevel instance);
    partial void UpdateTextLevel(TextLevel instance);
    partial void DeleteTextLevel(TextLevel instance);
    partial void InsertTextOut(TextOut instance);
    partial void UpdateTextOut(TextOut instance);
    partial void DeleteTextOut(TextOut instance);
    partial void InsertTextSecurity(TextSecurity instance);
    partial void UpdateTextSecurity(TextSecurity instance);
    partial void DeleteTextSecurity(TextSecurity instance);
    partial void InsertTextTo(TextTo instance);
    partial void UpdateTextTo(TextTo instance);
    partial void DeleteTextTo(TextTo instance);
    partial void InsertTypeCalendar(TypeCalendar instance);
    partial void UpdateTypeCalendar(TypeCalendar instance);
    partial void DeleteTypeCalendar(TypeCalendar instance);
    partial void InsertTypeText(TypeText instance);
    partial void UpdateTypeText(TypeText instance);
    partial void DeleteTypeText(TypeText instance);
    partial void InsertWork(Work instance);
    partial void UpdateWork(Work instance);
    partial void DeleteWork(Work instance);
    #endregion
		
		public ManagementDispatchDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ManagementDispatchConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ManagementDispatchDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagementDispatchDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagementDispatchDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ManagementDispatchDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Acount> Acounts
		{
			get
			{
				return this.GetTable<Acount>();
			}
		}
		
		public System.Data.Linq.Table<WorkingState> WorkingStates
		{
			get
			{
				return this.GetTable<WorkingState>();
			}
		}
		
		public System.Data.Linq.Table<AcountEmailSentID> AcountEmailSentIDs
		{
			get
			{
				return this.GetTable<AcountEmailSentID>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<CalendarWorking> CalendarWorkings
		{
			get
			{
				return this.GetTable<CalendarWorking>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentAddress> DepartmentAddresses
		{
			get
			{
				return this.GetTable<DepartmentAddress>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentOfDepartment> DepartmentOfDepartments
		{
			get
			{
				return this.GetTable<DepartmentOfDepartment>();
			}
		}
		
		public System.Data.Linq.Table<Email> Emails
		{
			get
			{
				return this.GetTable<Email>();
			}
		}
		
		public System.Data.Linq.Table<EmailAttachment> EmailAttachments
		{
			get
			{
				return this.GetTable<EmailAttachment>();
			}
		}
		
		public System.Data.Linq.Table<EmailInbox> EmailInboxes
		{
			get
			{
				return this.GetTable<EmailInbox>();
			}
		}
		
		public System.Data.Linq.Table<EmailSent> EmailSents
		{
			get
			{
				return this.GetTable<EmailSent>();
			}
		}
		
		public System.Data.Linq.Table<FileAttachment> FileAttachments
		{
			get
			{
				return this.GetTable<FileAttachment>();
			}
		}
		
		public System.Data.Linq.Table<GroupUser> GroupUsers
		{
			get
			{
				return this.GetTable<GroupUser>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menus
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<OwnerAdmin> OwnerAdmins
		{
			get
			{
				return this.GetTable<OwnerAdmin>();
			}
		}
		
		public System.Data.Linq.Table<OwnerCalendar> OwnerCalendars
		{
			get
			{
				return this.GetTable<OwnerCalendar>();
			}
		}
		
		public System.Data.Linq.Table<OwnerGroupUser> OwnerGroupUsers
		{
			get
			{
				return this.GetTable<OwnerGroupUser>();
			}
		}
		
		public System.Data.Linq.Table<OwnerText> OwnerTexts
		{
			get
			{
				return this.GetTable<OwnerText>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffGroupUser> StaffGroupUsers
		{
			get
			{
				return this.GetTable<StaffGroupUser>();
			}
		}
		
		public System.Data.Linq.Table<StateTextTo> StateTextTos
		{
			get
			{
				return this.GetTable<StateTextTo>();
			}
		}
		
		public System.Data.Linq.Table<SystemLog> SystemLogs
		{
			get
			{
				return this.GetTable<SystemLog>();
			}
		}
		
		public System.Data.Linq.Table<Text> Texts
		{
			get
			{
				return this.GetTable<Text>();
			}
		}
		
		public System.Data.Linq.Table<TextAttachment> TextAttachments
		{
			get
			{
				return this.GetTable<TextAttachment>();
			}
		}
		
		public System.Data.Linq.Table<TextInBook> TextInBooks
		{
			get
			{
				return this.GetTable<TextInBook>();
			}
		}
		
		public System.Data.Linq.Table<TextInbox> TextInboxes
		{
			get
			{
				return this.GetTable<TextInbox>();
			}
		}
		
		public System.Data.Linq.Table<TextLevel> TextLevels
		{
			get
			{
				return this.GetTable<TextLevel>();
			}
		}
		
		public System.Data.Linq.Table<TextOut> TextOuts
		{
			get
			{
				return this.GetTable<TextOut>();
			}
		}
		
		public System.Data.Linq.Table<TextSecurity> TextSecurities
		{
			get
			{
				return this.GetTable<TextSecurity>();
			}
		}
		
		public System.Data.Linq.Table<TextTo> TextTos
		{
			get
			{
				return this.GetTable<TextTo>();
			}
		}
		
		public System.Data.Linq.Table<TypeCalendar> TypeCalendars
		{
			get
			{
				return this.GetTable<TypeCalendar>();
			}
		}
		
		public System.Data.Linq.Table<TypeText> TypeTexts
		{
			get
			{
				return this.GetTable<TypeText>();
			}
		}
		
		public System.Data.Linq.Table<Work> Works
		{
			get
			{
				return this.GetTable<Work>();
			}
		}
	}
	
	[Table(Name="dbo.Acount")]
	public partial class Acount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AcountID;
		
		private string _UserName;
		
		private string _Password;
		
		private bool _AcountIsBlocked;
		
		private bool _IsAdminAcount;
		
		private EntitySet<AcountEmailSentID> _AcountEmailSentIDs;
		
		private EntitySet<EmailInbox> _EmailInboxes;
		
		private EntitySet<Staff> _Staffs;
		
		private EntitySet<SystemLog> _SystemLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcountIDChanging(System.Guid value);
    partial void OnAcountIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAcountIsBlockedChanging(bool value);
    partial void OnAcountIsBlockedChanged();
    partial void OnIsAdminAcountChanging(bool value);
    partial void OnIsAdminAcountChanged();
    #endregion
		
		public Acount()
		{
			this._AcountEmailSentIDs = new EntitySet<AcountEmailSentID>(new Action<AcountEmailSentID>(this.attach_AcountEmailSentIDs), new Action<AcountEmailSentID>(this.detach_AcountEmailSentIDs));
			this._EmailInboxes = new EntitySet<EmailInbox>(new Action<EmailInbox>(this.attach_EmailInboxes), new Action<EmailInbox>(this.detach_EmailInboxes));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._SystemLogs = new EntitySet<SystemLog>(new Action<SystemLog>(this.attach_SystemLogs), new Action<SystemLog>(this.detach_SystemLogs));
			OnCreated();
		}
		
		[Column(Storage="_AcountID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AcountID
		{
			get
			{
				return this._AcountID;
			}
			set
			{
				if ((this._AcountID != value))
				{
					this.OnAcountIDChanging(value);
					this.SendPropertyChanging();
					this._AcountID = value;
					this.SendPropertyChanged("AcountID");
					this.OnAcountIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_AcountIsBlocked", DbType="Bit NOT NULL")]
		public bool AcountIsBlocked
		{
			get
			{
				return this._AcountIsBlocked;
			}
			set
			{
				if ((this._AcountIsBlocked != value))
				{
					this.OnAcountIsBlockedChanging(value);
					this.SendPropertyChanging();
					this._AcountIsBlocked = value;
					this.SendPropertyChanged("AcountIsBlocked");
					this.OnAcountIsBlockedChanged();
				}
			}
		}
		
		[Column(Storage="_IsAdminAcount", DbType="Bit NOT NULL")]
		public bool IsAdminAcount
		{
			get
			{
				return this._IsAdminAcount;
			}
			set
			{
				if ((this._IsAdminAcount != value))
				{
					this.OnIsAdminAcountChanging(value);
					this.SendPropertyChanging();
					this._IsAdminAcount = value;
					this.SendPropertyChanged("IsAdminAcount");
					this.OnIsAdminAcountChanged();
				}
			}
		}
		
		[Association(Name="Acount_AcountEmailSentID", Storage="_AcountEmailSentIDs", OtherKey="AcountID")]
		public EntitySet<AcountEmailSentID> AcountEmailSentIDs
		{
			get
			{
				return this._AcountEmailSentIDs;
			}
			set
			{
				this._AcountEmailSentIDs.Assign(value);
			}
		}
		
		[Association(Name="Acount_EmailInbox", Storage="_EmailInboxes", OtherKey="AcountID")]
		public EntitySet<EmailInbox> EmailInboxes
		{
			get
			{
				return this._EmailInboxes;
			}
			set
			{
				this._EmailInboxes.Assign(value);
			}
		}
		
		[Association(Name="Acount_Staff", Storage="_Staffs", OtherKey="AcountID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[Association(Name="Acount_SystemLog", Storage="_SystemLogs", OtherKey="AcountID")]
		public EntitySet<SystemLog> SystemLogs
		{
			get
			{
				return this._SystemLogs;
			}
			set
			{
				this._SystemLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AcountEmailSentIDs(AcountEmailSentID entity)
		{
			this.SendPropertyChanging();
			entity.Acount = this;
		}
		
		private void detach_AcountEmailSentIDs(AcountEmailSentID entity)
		{
			this.SendPropertyChanging();
			entity.Acount = null;
		}
		
		private void attach_EmailInboxes(EmailInbox entity)
		{
			this.SendPropertyChanging();
			entity.Acount = this;
		}
		
		private void detach_EmailInboxes(EmailInbox entity)
		{
			this.SendPropertyChanging();
			entity.Acount = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Acount = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Acount = null;
		}
		
		private void attach_SystemLogs(SystemLog entity)
		{
			this.SendPropertyChanging();
			entity.Acount = this;
		}
		
		private void detach_SystemLogs(SystemLog entity)
		{
			this.SendPropertyChanging();
			entity.Acount = null;
		}
	}
	
	[Table(Name="dbo.WorkingState")]
	public partial class WorkingState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WorkingStateID;
		
		private string _WorkingStateName;
		
		private EntitySet<CalendarWorking> _CalendarWorkings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkingStateIDChanging(System.Guid value);
    partial void OnWorkingStateIDChanged();
    partial void OnWorkingStateNameChanging(string value);
    partial void OnWorkingStateNameChanged();
    #endregion
		
		public WorkingState()
		{
			this._CalendarWorkings = new EntitySet<CalendarWorking>(new Action<CalendarWorking>(this.attach_CalendarWorkings), new Action<CalendarWorking>(this.detach_CalendarWorkings));
			OnCreated();
		}
		
		[Column(Storage="_WorkingStateID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WorkingStateID
		{
			get
			{
				return this._WorkingStateID;
			}
			set
			{
				if ((this._WorkingStateID != value))
				{
					this.OnWorkingStateIDChanging(value);
					this.SendPropertyChanging();
					this._WorkingStateID = value;
					this.SendPropertyChanged("WorkingStateID");
					this.OnWorkingStateIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkingStateName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string WorkingStateName
		{
			get
			{
				return this._WorkingStateName;
			}
			set
			{
				if ((this._WorkingStateName != value))
				{
					this.OnWorkingStateNameChanging(value);
					this.SendPropertyChanging();
					this._WorkingStateName = value;
					this.SendPropertyChanged("WorkingStateName");
					this.OnWorkingStateNameChanged();
				}
			}
		}
		
		[Association(Name="WorkingState_CalendarWorking", Storage="_CalendarWorkings", OtherKey="WorkingStateID")]
		public EntitySet<CalendarWorking> CalendarWorkings
		{
			get
			{
				return this._CalendarWorkings;
			}
			set
			{
				this._CalendarWorkings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CalendarWorkings(CalendarWorking entity)
		{
			this.SendPropertyChanging();
			entity.WorkingState = this;
		}
		
		private void detach_CalendarWorkings(CalendarWorking entity)
		{
			this.SendPropertyChanging();
			entity.WorkingState = null;
		}
	}
	
	[Table(Name="dbo.AcountEmailSentID")]
	public partial class AcountEmailSentID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EmailSentID;
		
		private System.Guid _AcountID;
		
		private EntityRef<Acount> _Acount;
		
		private EntityRef<EmailSent> _EmailSent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailSentIDChanging(System.Guid value);
    partial void OnEmailSentIDChanged();
    partial void OnAcountIDChanging(System.Guid value);
    partial void OnAcountIDChanged();
    #endregion
		
		public AcountEmailSentID()
		{
			this._Acount = default(EntityRef<Acount>);
			this._EmailSent = default(EntityRef<EmailSent>);
			OnCreated();
		}
		
		[Column(Storage="_EmailSentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EmailSentID
		{
			get
			{
				return this._EmailSentID;
			}
			set
			{
				if ((this._EmailSentID != value))
				{
					if (this._EmailSent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailSentIDChanging(value);
					this.SendPropertyChanging();
					this._EmailSentID = value;
					this.SendPropertyChanged("EmailSentID");
					this.OnEmailSentIDChanged();
				}
			}
		}
		
		[Column(Storage="_AcountID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AcountID
		{
			get
			{
				return this._AcountID;
			}
			set
			{
				if ((this._AcountID != value))
				{
					if (this._Acount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcountIDChanging(value);
					this.SendPropertyChanging();
					this._AcountID = value;
					this.SendPropertyChanged("AcountID");
					this.OnAcountIDChanged();
				}
			}
		}
		
		[Association(Name="Acount_AcountEmailSentID", Storage="_Acount", ThisKey="AcountID", IsForeignKey=true)]
		public Acount Acount
		{
			get
			{
				return this._Acount.Entity;
			}
			set
			{
				Acount previousValue = this._Acount.Entity;
				if (((previousValue != value) 
							|| (this._Acount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Acount.Entity = null;
						previousValue.AcountEmailSentIDs.Remove(this);
					}
					this._Acount.Entity = value;
					if ((value != null))
					{
						value.AcountEmailSentIDs.Add(this);
						this._AcountID = value.AcountID;
					}
					else
					{
						this._AcountID = default(System.Guid);
					}
					this.SendPropertyChanged("Acount");
				}
			}
		}
		
		[Association(Name="EmailSent_AcountEmailSentID", Storage="_EmailSent", ThisKey="EmailSentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EmailSent EmailSent
		{
			get
			{
				return this._EmailSent.Entity;
			}
			set
			{
				EmailSent previousValue = this._EmailSent.Entity;
				if (((previousValue != value) 
							|| (this._EmailSent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailSent.Entity = null;
						previousValue.AcountEmailSentID = null;
					}
					this._EmailSent.Entity = value;
					if ((value != null))
					{
						value.AcountEmailSentID = this;
						this._EmailSentID = value.EmailSentID;
					}
					else
					{
						this._EmailSentID = default(System.Guid);
					}
					this.SendPropertyChanged("EmailSent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BookID;
		
		private System.Guid _DepartmentID;
		
		private string _BookName;
		
		private string _BookPrefix;
		
		private string _BookDescription;
		
		private bool _IsDeleted;
		
		private EntitySet<TextInBook> _TextInBooks;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIDChanging(System.Guid value);
    partial void OnBookIDChanged();
    partial void OnDepartmentIDChanging(System.Guid value);
    partial void OnDepartmentIDChanged();
    partial void OnBookNameChanging(string value);
    partial void OnBookNameChanged();
    partial void OnBookPrefixChanging(string value);
    partial void OnBookPrefixChanged();
    partial void OnBookDescriptionChanging(string value);
    partial void OnBookDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Book()
		{
			this._TextInBooks = new EntitySet<TextInBook>(new Action<TextInBook>(this.attach_TextInBooks), new Action<TextInBook>(this.detach_TextInBooks));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_BookID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_BookName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string BookName
		{
			get
			{
				return this._BookName;
			}
			set
			{
				if ((this._BookName != value))
				{
					this.OnBookNameChanging(value);
					this.SendPropertyChanging();
					this._BookName = value;
					this.SendPropertyChanged("BookName");
					this.OnBookNameChanged();
				}
			}
		}
		
		[Column(Storage="_BookPrefix", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BookPrefix
		{
			get
			{
				return this._BookPrefix;
			}
			set
			{
				if ((this._BookPrefix != value))
				{
					this.OnBookPrefixChanging(value);
					this.SendPropertyChanging();
					this._BookPrefix = value;
					this.SendPropertyChanged("BookPrefix");
					this.OnBookPrefixChanged();
				}
			}
		}
		
		[Column(Storage="_BookDescription", DbType="NVarChar(150)")]
		public string BookDescription
		{
			get
			{
				return this._BookDescription;
			}
			set
			{
				if ((this._BookDescription != value))
				{
					this.OnBookDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BookDescription = value;
					this.SendPropertyChanged("BookDescription");
					this.OnBookDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Book_TextInBook", Storage="_TextInBooks", OtherKey="BookID")]
		public EntitySet<TextInBook> TextInBooks
		{
			get
			{
				return this._TextInBooks;
			}
			set
			{
				this._TextInBooks.Assign(value);
			}
		}
		
		[Association(Name="Department_Book", Storage="_Department", ThisKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TextInBooks(TextInBook entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_TextInBooks(TextInBook entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[Table(Name="dbo.CalendarWorking")]
	public partial class CalendarWorking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CalendarWorkID;
		
		private System.Guid _TypeCalendarID;
		
		private System.Guid _StaffOrDepartmentID;
		
		private System.Guid _WorkID;
		
		private string _ChargePerson;
		
		private System.Guid _WorkingStateID;
		
		private EntityRef<WorkingState> _WorkingState;
		
		private EntityRef<TypeCalendar> _TypeCalendar;
		
		private EntityRef<Work> _Work;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCalendarWorkIDChanging(System.Guid value);
    partial void OnCalendarWorkIDChanged();
    partial void OnTypeCalendarIDChanging(System.Guid value);
    partial void OnTypeCalendarIDChanged();
    partial void OnStaffOrDepartmentIDChanging(System.Guid value);
    partial void OnStaffOrDepartmentIDChanged();
    partial void OnWorkIDChanging(System.Guid value);
    partial void OnWorkIDChanged();
    partial void OnChargePersonChanging(string value);
    partial void OnChargePersonChanged();
    partial void OnWorkingStateIDChanging(System.Guid value);
    partial void OnWorkingStateIDChanged();
    #endregion
		
		public CalendarWorking()
		{
			this._WorkingState = default(EntityRef<WorkingState>);
			this._TypeCalendar = default(EntityRef<TypeCalendar>);
			this._Work = default(EntityRef<Work>);
			OnCreated();
		}
		
		[Column(Storage="_CalendarWorkID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CalendarWorkID
		{
			get
			{
				return this._CalendarWorkID;
			}
			set
			{
				if ((this._CalendarWorkID != value))
				{
					this.OnCalendarWorkIDChanging(value);
					this.SendPropertyChanging();
					this._CalendarWorkID = value;
					this.SendPropertyChanged("CalendarWorkID");
					this.OnCalendarWorkIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeCalendarID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TypeCalendarID
		{
			get
			{
				return this._TypeCalendarID;
			}
			set
			{
				if ((this._TypeCalendarID != value))
				{
					if (this._TypeCalendar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeCalendarIDChanging(value);
					this.SendPropertyChanging();
					this._TypeCalendarID = value;
					this.SendPropertyChanged("TypeCalendarID");
					this.OnTypeCalendarIDChanged();
				}
			}
		}
		
		[Column(Storage="_StaffOrDepartmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffOrDepartmentID
		{
			get
			{
				return this._StaffOrDepartmentID;
			}
			set
			{
				if ((this._StaffOrDepartmentID != value))
				{
					this.OnStaffOrDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._StaffOrDepartmentID = value;
					this.SendPropertyChanged("StaffOrDepartmentID");
					this.OnStaffOrDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WorkID
		{
			get
			{
				return this._WorkID;
			}
			set
			{
				if ((this._WorkID != value))
				{
					if (this._Work.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkID = value;
					this.SendPropertyChanged("WorkID");
					this.OnWorkIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChargePerson", DbType="NVarChar(50)")]
		public string ChargePerson
		{
			get
			{
				return this._ChargePerson;
			}
			set
			{
				if ((this._ChargePerson != value))
				{
					this.OnChargePersonChanging(value);
					this.SendPropertyChanging();
					this._ChargePerson = value;
					this.SendPropertyChanged("ChargePerson");
					this.OnChargePersonChanged();
				}
			}
		}
		
		[Column(Storage="_WorkingStateID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WorkingStateID
		{
			get
			{
				return this._WorkingStateID;
			}
			set
			{
				if ((this._WorkingStateID != value))
				{
					if (this._WorkingState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkingStateIDChanging(value);
					this.SendPropertyChanging();
					this._WorkingStateID = value;
					this.SendPropertyChanged("WorkingStateID");
					this.OnWorkingStateIDChanged();
				}
			}
		}
		
		[Association(Name="WorkingState_CalendarWorking", Storage="_WorkingState", ThisKey="WorkingStateID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WorkingState WorkingState
		{
			get
			{
				return this._WorkingState.Entity;
			}
			set
			{
				WorkingState previousValue = this._WorkingState.Entity;
				if (((previousValue != value) 
							|| (this._WorkingState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkingState.Entity = null;
						previousValue.CalendarWorkings.Remove(this);
					}
					this._WorkingState.Entity = value;
					if ((value != null))
					{
						value.CalendarWorkings.Add(this);
						this._WorkingStateID = value.WorkingStateID;
					}
					else
					{
						this._WorkingStateID = default(System.Guid);
					}
					this.SendPropertyChanged("WorkingState");
				}
			}
		}
		
		[Association(Name="TypeCalendar_CalendarWorking", Storage="_TypeCalendar", ThisKey="TypeCalendarID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TypeCalendar TypeCalendar
		{
			get
			{
				return this._TypeCalendar.Entity;
			}
			set
			{
				TypeCalendar previousValue = this._TypeCalendar.Entity;
				if (((previousValue != value) 
							|| (this._TypeCalendar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeCalendar.Entity = null;
						previousValue.CalendarWorkings.Remove(this);
					}
					this._TypeCalendar.Entity = value;
					if ((value != null))
					{
						value.CalendarWorkings.Add(this);
						this._TypeCalendarID = value.TypeCalendarID;
					}
					else
					{
						this._TypeCalendarID = default(System.Guid);
					}
					this.SendPropertyChanged("TypeCalendar");
				}
			}
		}
		
		[Association(Name="Work_CalendarWorking", Storage="_Work", ThisKey="WorkID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Work Work
		{
			get
			{
				return this._Work.Entity;
			}
			set
			{
				Work previousValue = this._Work.Entity;
				if (((previousValue != value) 
							|| (this._Work.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Work.Entity = null;
						previousValue.CalendarWorkings.Remove(this);
					}
					this._Work.Entity = value;
					if ((value != null))
					{
						value.CalendarWorkings.Add(this);
						this._WorkID = value.WorkID;
					}
					else
					{
						this._WorkID = default(System.Guid);
					}
					this.SendPropertyChanged("Work");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DepartmentID;
		
		private string _DepartmentName;
		
		private bool _IsDeleted;
		
		private EntitySet<Book> _Books;
		
		private EntityRef<DepartmentOfDepartment> _DepartmentOfDepartment;
		
		private EntitySet<DepartmentOfDepartment> _DepartmentOfDepartments;
		
		private EntitySet<Staff> _Staffs;
		
		private EntitySet<TextOut> _TextOuts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(System.Guid value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Department()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._DepartmentOfDepartment = default(EntityRef<DepartmentOfDepartment>);
			this._DepartmentOfDepartments = new EntitySet<DepartmentOfDepartment>(new Action<DepartmentOfDepartment>(this.attach_DepartmentOfDepartments), new Action<DepartmentOfDepartment>(this.detach_DepartmentOfDepartments));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._TextOuts = new EntitySet<TextOut>(new Action<TextOut>(this.attach_TextOuts), new Action<TextOut>(this.detach_TextOuts));
			OnCreated();
		}
		
		[Column(Storage="_DepartmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Department_Book", Storage="_Books", OtherKey="DepartmentID")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[Association(Name="Department_DepartmentOfDepartment", Storage="_DepartmentOfDepartment", ThisKey="DepartmentID", IsUnique=true, IsForeignKey=false)]
		public DepartmentOfDepartment DepartmentOfDepartment
		{
			get
			{
				return this._DepartmentOfDepartment.Entity;
			}
			set
			{
				DepartmentOfDepartment previousValue = this._DepartmentOfDepartment.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentOfDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentOfDepartment.Entity = null;
						previousValue.Department = null;
					}
					this._DepartmentOfDepartment.Entity = value;
					if ((value != null))
					{
						value.Department = this;
					}
					this.SendPropertyChanged("DepartmentOfDepartment");
				}
			}
		}
		
		[Association(Name="Department_DepartmentOfDepartment1", Storage="_DepartmentOfDepartments", OtherKey="DepartmentParentID")]
		public EntitySet<DepartmentOfDepartment> DepartmentOfDepartments
		{
			get
			{
				return this._DepartmentOfDepartments;
			}
			set
			{
				this._DepartmentOfDepartments.Assign(value);
			}
		}
		
		[Association(Name="Department_Staff", Storage="_Staffs", OtherKey="DepartmentID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[Association(Name="Department_TextOut", Storage="_TextOuts", OtherKey="DepartmentID")]
		public EntitySet<TextOut> TextOuts
		{
			get
			{
				return this._TextOuts;
			}
			set
			{
				this._TextOuts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_DepartmentOfDepartments(DepartmentOfDepartment entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = this;
		}
		
		private void detach_DepartmentOfDepartments(DepartmentOfDepartment entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_TextOuts(TextOut entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_TextOuts(TextOut entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.DepartmentAddress")]
	public partial class DepartmentAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DepartmentAddressID;
		
		private string _DepartmentAddressName;
		
		private string _Note;
		
		private bool _IsDeleted;
		
		private EntitySet<Text> _Texts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentAddressIDChanging(System.Guid value);
    partial void OnDepartmentAddressIDChanged();
    partial void OnDepartmentAddressNameChanging(string value);
    partial void OnDepartmentAddressNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public DepartmentAddress()
		{
			this._Texts = new EntitySet<Text>(new Action<Text>(this.attach_Texts), new Action<Text>(this.detach_Texts));
			OnCreated();
		}
		
		[Column(Storage="_DepartmentAddressID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DepartmentAddressID
		{
			get
			{
				return this._DepartmentAddressID;
			}
			set
			{
				if ((this._DepartmentAddressID != value))
				{
					this.OnDepartmentAddressIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentAddressID = value;
					this.SendPropertyChanged("DepartmentAddressID");
					this.OnDepartmentAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentAddressName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DepartmentAddressName
		{
			get
			{
				return this._DepartmentAddressName;
			}
			set
			{
				if ((this._DepartmentAddressName != value))
				{
					this.OnDepartmentAddressNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentAddressName = value;
					this.SendPropertyChanged("DepartmentAddressName");
					this.OnDepartmentAddressNameChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="DepartmentAddress_Text", Storage="_Texts", OtherKey="DepartmentAddressID")]
		public EntitySet<Text> Texts
		{
			get
			{
				return this._Texts;
			}
			set
			{
				this._Texts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Texts(Text entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentAddress = this;
		}
		
		private void detach_Texts(Text entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentAddress = null;
		}
	}
	
	[Table(Name="dbo.DepartmentOfDepartment")]
	public partial class DepartmentOfDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DepartmentID;
		
		private System.Guid _DepartmentParentID;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Department> _Department1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(System.Guid value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentParentIDChanging(System.Guid value);
    partial void OnDepartmentParentIDChanged();
    #endregion
		
		public DepartmentOfDepartment()
		{
			this._Department = default(EntityRef<Department>);
			this._Department1 = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_DepartmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentParentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentParentID
		{
			get
			{
				return this._DepartmentParentID;
			}
			set
			{
				if ((this._DepartmentParentID != value))
				{
					if (this._Department1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentParentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentParentID = value;
					this.SendPropertyChanged("DepartmentParentID");
					this.OnDepartmentParentIDChanged();
				}
			}
		}
		
		[Association(Name="Department_DepartmentOfDepartment", Storage="_Department", ThisKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.DepartmentOfDepartment = null;
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.DepartmentOfDepartment = this;
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[Association(Name="Department_DepartmentOfDepartment1", Storage="_Department1", ThisKey="DepartmentParentID", IsForeignKey=true)]
		public Department Department1
		{
			get
			{
				return this._Department1.Entity;
			}
			set
			{
				Department previousValue = this._Department1.Entity;
				if (((previousValue != value) 
							|| (this._Department1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department1.Entity = null;
						previousValue.DepartmentOfDepartments.Remove(this);
					}
					this._Department1.Entity = value;
					if ((value != null))
					{
						value.DepartmentOfDepartments.Add(this);
						this._DepartmentParentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentParentID = default(System.Guid);
					}
					this.SendPropertyChanged("Department1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Email")]
	public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EmailID;
		
		private string _EmailSubject;
		
		private string _EmailContent;
		
		private EntitySet<EmailAttachment> _EmailAttachments;
		
		private EntitySet<EmailInbox> _EmailInboxes;
		
		private EntitySet<EmailSent> _EmailSents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailIDChanging(System.Guid value);
    partial void OnEmailIDChanged();
    partial void OnEmailSubjectChanging(string value);
    partial void OnEmailSubjectChanged();
    partial void OnEmailContentChanging(string value);
    partial void OnEmailContentChanged();
    #endregion
		
		public Email()
		{
			this._EmailAttachments = new EntitySet<EmailAttachment>(new Action<EmailAttachment>(this.attach_EmailAttachments), new Action<EmailAttachment>(this.detach_EmailAttachments));
			this._EmailInboxes = new EntitySet<EmailInbox>(new Action<EmailInbox>(this.attach_EmailInboxes), new Action<EmailInbox>(this.detach_EmailInboxes));
			this._EmailSents = new EntitySet<EmailSent>(new Action<EmailSent>(this.attach_EmailSents), new Action<EmailSent>(this.detach_EmailSents));
			OnCreated();
		}
		
		[Column(Storage="_EmailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmailSubject", DbType="NVarChar(200)")]
		public string EmailSubject
		{
			get
			{
				return this._EmailSubject;
			}
			set
			{
				if ((this._EmailSubject != value))
				{
					this.OnEmailSubjectChanging(value);
					this.SendPropertyChanging();
					this._EmailSubject = value;
					this.SendPropertyChanged("EmailSubject");
					this.OnEmailSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_EmailContent", DbType="NVarChar(MAX)")]
		public string EmailContent
		{
			get
			{
				return this._EmailContent;
			}
			set
			{
				if ((this._EmailContent != value))
				{
					this.OnEmailContentChanging(value);
					this.SendPropertyChanging();
					this._EmailContent = value;
					this.SendPropertyChanged("EmailContent");
					this.OnEmailContentChanged();
				}
			}
		}
		
		[Association(Name="Email_EmailAttachment", Storage="_EmailAttachments", OtherKey="EmailID")]
		public EntitySet<EmailAttachment> EmailAttachments
		{
			get
			{
				return this._EmailAttachments;
			}
			set
			{
				this._EmailAttachments.Assign(value);
			}
		}
		
		[Association(Name="Email_EmailInbox", Storage="_EmailInboxes", OtherKey="EmailID")]
		public EntitySet<EmailInbox> EmailInboxes
		{
			get
			{
				return this._EmailInboxes;
			}
			set
			{
				this._EmailInboxes.Assign(value);
			}
		}
		
		[Association(Name="Email_EmailSent", Storage="_EmailSents", OtherKey="EmailID")]
		public EntitySet<EmailSent> EmailSents
		{
			get
			{
				return this._EmailSents;
			}
			set
			{
				this._EmailSents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmailAttachments(EmailAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Email = this;
		}
		
		private void detach_EmailAttachments(EmailAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Email = null;
		}
		
		private void attach_EmailInboxes(EmailInbox entity)
		{
			this.SendPropertyChanging();
			entity.Email = this;
		}
		
		private void detach_EmailInboxes(EmailInbox entity)
		{
			this.SendPropertyChanging();
			entity.Email = null;
		}
		
		private void attach_EmailSents(EmailSent entity)
		{
			this.SendPropertyChanging();
			entity.Email = this;
		}
		
		private void detach_EmailSents(EmailSent entity)
		{
			this.SendPropertyChanging();
			entity.Email = null;
		}
	}
	
	[Table(Name="dbo.EmailAttachment")]
	public partial class EmailAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EmailAttachmentID;
		
		private System.Guid _EmailID;
		
		private System.Guid _FileAttachmentID;
		
		private EntityRef<Email> _Email;
		
		private EntityRef<FileAttachment> _FileAttachment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailAttachmentIDChanging(System.Guid value);
    partial void OnEmailAttachmentIDChanged();
    partial void OnEmailIDChanging(System.Guid value);
    partial void OnEmailIDChanged();
    partial void OnFileAttachmentIDChanging(System.Guid value);
    partial void OnFileAttachmentIDChanged();
    #endregion
		
		public EmailAttachment()
		{
			this._Email = default(EntityRef<Email>);
			this._FileAttachment = default(EntityRef<FileAttachment>);
			OnCreated();
		}
		
		[Column(Storage="_EmailAttachmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EmailAttachmentID
		{
			get
			{
				return this._EmailAttachmentID;
			}
			set
			{
				if ((this._EmailAttachmentID != value))
				{
					this.OnEmailAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._EmailAttachmentID = value;
					this.SendPropertyChanged("EmailAttachmentID");
					this.OnEmailAttachmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmailID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					if (this._Email.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileAttachmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FileAttachmentID
		{
			get
			{
				return this._FileAttachmentID;
			}
			set
			{
				if ((this._FileAttachmentID != value))
				{
					if (this._FileAttachment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._FileAttachmentID = value;
					this.SendPropertyChanged("FileAttachmentID");
					this.OnFileAttachmentIDChanged();
				}
			}
		}
		
		[Association(Name="Email_EmailAttachment", Storage="_Email", ThisKey="EmailID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Email Email
		{
			get
			{
				return this._Email.Entity;
			}
			set
			{
				Email previousValue = this._Email.Entity;
				if (((previousValue != value) 
							|| (this._Email.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Email.Entity = null;
						previousValue.EmailAttachments.Remove(this);
					}
					this._Email.Entity = value;
					if ((value != null))
					{
						value.EmailAttachments.Add(this);
						this._EmailID = value.EmailID;
					}
					else
					{
						this._EmailID = default(System.Guid);
					}
					this.SendPropertyChanged("Email");
				}
			}
		}
		
		[Association(Name="FileAttachment_EmailAttachment", Storage="_FileAttachment", ThisKey="FileAttachmentID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public FileAttachment FileAttachment
		{
			get
			{
				return this._FileAttachment.Entity;
			}
			set
			{
				FileAttachment previousValue = this._FileAttachment.Entity;
				if (((previousValue != value) 
							|| (this._FileAttachment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileAttachment.Entity = null;
						previousValue.EmailAttachments.Remove(this);
					}
					this._FileAttachment.Entity = value;
					if ((value != null))
					{
						value.EmailAttachments.Add(this);
						this._FileAttachmentID = value.FileAttachmentID;
					}
					else
					{
						this._FileAttachmentID = default(System.Guid);
					}
					this.SendPropertyChanged("FileAttachment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EmailInbox")]
	public partial class EmailInbox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EmailInboxID;
		
		private System.Guid _EmailID;
		
		private System.DateTime _DateTo;
		
		private System.Guid _AcountID;
		
		private EntityRef<Acount> _Acount;
		
		private EntityRef<Email> _Email;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailInboxIDChanging(System.Guid value);
    partial void OnEmailInboxIDChanged();
    partial void OnEmailIDChanging(System.Guid value);
    partial void OnEmailIDChanged();
    partial void OnDateToChanging(System.DateTime value);
    partial void OnDateToChanged();
    partial void OnAcountIDChanging(System.Guid value);
    partial void OnAcountIDChanged();
    #endregion
		
		public EmailInbox()
		{
			this._Acount = default(EntityRef<Acount>);
			this._Email = default(EntityRef<Email>);
			OnCreated();
		}
		
		[Column(Storage="_EmailInboxID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EmailInboxID
		{
			get
			{
				return this._EmailInboxID;
			}
			set
			{
				if ((this._EmailInboxID != value))
				{
					this.OnEmailInboxIDChanging(value);
					this.SendPropertyChanging();
					this._EmailInboxID = value;
					this.SendPropertyChanged("EmailInboxID");
					this.OnEmailInboxIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmailID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					if (this._Email.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateTo", DbType="DateTime NOT NULL")]
		public System.DateTime DateTo
		{
			get
			{
				return this._DateTo;
			}
			set
			{
				if ((this._DateTo != value))
				{
					this.OnDateToChanging(value);
					this.SendPropertyChanging();
					this._DateTo = value;
					this.SendPropertyChanged("DateTo");
					this.OnDateToChanged();
				}
			}
		}
		
		[Column(Storage="_AcountID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AcountID
		{
			get
			{
				return this._AcountID;
			}
			set
			{
				if ((this._AcountID != value))
				{
					if (this._Acount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcountIDChanging(value);
					this.SendPropertyChanging();
					this._AcountID = value;
					this.SendPropertyChanged("AcountID");
					this.OnAcountIDChanged();
				}
			}
		}
		
		[Association(Name="Acount_EmailInbox", Storage="_Acount", ThisKey="AcountID", IsForeignKey=true)]
		public Acount Acount
		{
			get
			{
				return this._Acount.Entity;
			}
			set
			{
				Acount previousValue = this._Acount.Entity;
				if (((previousValue != value) 
							|| (this._Acount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Acount.Entity = null;
						previousValue.EmailInboxes.Remove(this);
					}
					this._Acount.Entity = value;
					if ((value != null))
					{
						value.EmailInboxes.Add(this);
						this._AcountID = value.AcountID;
					}
					else
					{
						this._AcountID = default(System.Guid);
					}
					this.SendPropertyChanged("Acount");
				}
			}
		}
		
		[Association(Name="Email_EmailInbox", Storage="_Email", ThisKey="EmailID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Email Email
		{
			get
			{
				return this._Email.Entity;
			}
			set
			{
				Email previousValue = this._Email.Entity;
				if (((previousValue != value) 
							|| (this._Email.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Email.Entity = null;
						previousValue.EmailInboxes.Remove(this);
					}
					this._Email.Entity = value;
					if ((value != null))
					{
						value.EmailInboxes.Add(this);
						this._EmailID = value.EmailID;
					}
					else
					{
						this._EmailID = default(System.Guid);
					}
					this.SendPropertyChanged("Email");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EmailSent")]
	public partial class EmailSent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EmailSentID;
		
		private System.Guid _EmailID;
		
		private System.DateTime _Date;
		
		private EntityRef<AcountEmailSentID> _AcountEmailSentID;
		
		private EntityRef<Email> _Email;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailSentIDChanging(System.Guid value);
    partial void OnEmailSentIDChanged();
    partial void OnEmailIDChanging(System.Guid value);
    partial void OnEmailIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public EmailSent()
		{
			this._AcountEmailSentID = default(EntityRef<AcountEmailSentID>);
			this._Email = default(EntityRef<Email>);
			OnCreated();
		}
		
		[Column(Storage="_EmailSentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EmailSentID
		{
			get
			{
				return this._EmailSentID;
			}
			set
			{
				if ((this._EmailSentID != value))
				{
					this.OnEmailSentIDChanging(value);
					this.SendPropertyChanging();
					this._EmailSentID = value;
					this.SendPropertyChanged("EmailSentID");
					this.OnEmailSentIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmailID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					if (this._Email.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="EmailSent_AcountEmailSentID", Storage="_AcountEmailSentID", ThisKey="EmailSentID", IsUnique=true, IsForeignKey=false)]
		public AcountEmailSentID AcountEmailSentID
		{
			get
			{
				return this._AcountEmailSentID.Entity;
			}
			set
			{
				AcountEmailSentID previousValue = this._AcountEmailSentID.Entity;
				if (((previousValue != value) 
							|| (this._AcountEmailSentID.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcountEmailSentID.Entity = null;
						previousValue.EmailSent = null;
					}
					this._AcountEmailSentID.Entity = value;
					if ((value != null))
					{
						value.EmailSent = this;
					}
					this.SendPropertyChanged("AcountEmailSentID");
				}
			}
		}
		
		[Association(Name="Email_EmailSent", Storage="_Email", ThisKey="EmailID", IsForeignKey=true)]
		public Email Email
		{
			get
			{
				return this._Email.Entity;
			}
			set
			{
				Email previousValue = this._Email.Entity;
				if (((previousValue != value) 
							|| (this._Email.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Email.Entity = null;
						previousValue.EmailSents.Remove(this);
					}
					this._Email.Entity = value;
					if ((value != null))
					{
						value.EmailSents.Add(this);
						this._EmailID = value.EmailID;
					}
					else
					{
						this._EmailID = default(System.Guid);
					}
					this.SendPropertyChanged("Email");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FileAttachment")]
	public partial class FileAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FileAttachmentID;
		
		private string _FileName;
		
		private double _FileSize;
		
		private string _ContentType;
		
		private System.Data.Linq.Binary _FileData;
		
		private EntitySet<EmailAttachment> _EmailAttachments;
		
		private EntitySet<TextAttachment> _TextAttachments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileAttachmentIDChanging(System.Guid value);
    partial void OnFileAttachmentIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileSizeChanging(double value);
    partial void OnFileSizeChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnFileDataChanging(System.Data.Linq.Binary value);
    partial void OnFileDataChanged();
    #endregion
		
		public FileAttachment()
		{
			this._EmailAttachments = new EntitySet<EmailAttachment>(new Action<EmailAttachment>(this.attach_EmailAttachments), new Action<EmailAttachment>(this.detach_EmailAttachments));
			this._TextAttachments = new EntitySet<TextAttachment>(new Action<TextAttachment>(this.attach_TextAttachments), new Action<TextAttachment>(this.detach_TextAttachments));
			OnCreated();
		}
		
		[Column(Storage="_FileAttachmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FileAttachmentID
		{
			get
			{
				return this._FileAttachmentID;
			}
			set
			{
				if ((this._FileAttachmentID != value))
				{
					this.OnFileAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._FileAttachmentID = value;
					this.SendPropertyChanged("FileAttachmentID");
					this.OnFileAttachmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileSize", DbType="Float NOT NULL")]
		public double FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_ContentType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_FileData", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FileData
		{
			get
			{
				return this._FileData;
			}
			set
			{
				if ((this._FileData != value))
				{
					this.OnFileDataChanging(value);
					this.SendPropertyChanging();
					this._FileData = value;
					this.SendPropertyChanged("FileData");
					this.OnFileDataChanged();
				}
			}
		}
		
		[Association(Name="FileAttachment_EmailAttachment", Storage="_EmailAttachments", OtherKey="FileAttachmentID")]
		public EntitySet<EmailAttachment> EmailAttachments
		{
			get
			{
				return this._EmailAttachments;
			}
			set
			{
				this._EmailAttachments.Assign(value);
			}
		}
		
		[Association(Name="FileAttachment_TextAttachment", Storage="_TextAttachments", OtherKey="FileAttachmentID")]
		public EntitySet<TextAttachment> TextAttachments
		{
			get
			{
				return this._TextAttachments;
			}
			set
			{
				this._TextAttachments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmailAttachments(EmailAttachment entity)
		{
			this.SendPropertyChanging();
			entity.FileAttachment = this;
		}
		
		private void detach_EmailAttachments(EmailAttachment entity)
		{
			this.SendPropertyChanging();
			entity.FileAttachment = null;
		}
		
		private void attach_TextAttachments(TextAttachment entity)
		{
			this.SendPropertyChanging();
			entity.FileAttachment = this;
		}
		
		private void detach_TextAttachments(TextAttachment entity)
		{
			this.SendPropertyChanging();
			entity.FileAttachment = null;
		}
	}
	
	[Table(Name="dbo.GroupUser")]
	public partial class GroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GroupUserID;
		
		private string _GroupUserName;
		
		private EntitySet<OwnerGroupUser> _OwnerGroupUsers;
		
		private EntitySet<StaffGroupUser> _StaffGroupUsers;
		
		private EntitySet<TextOut> _TextOuts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupUserIDChanging(System.Guid value);
    partial void OnGroupUserIDChanged();
    partial void OnGroupUserNameChanging(string value);
    partial void OnGroupUserNameChanged();
    #endregion
		
		public GroupUser()
		{
			this._OwnerGroupUsers = new EntitySet<OwnerGroupUser>(new Action<OwnerGroupUser>(this.attach_OwnerGroupUsers), new Action<OwnerGroupUser>(this.detach_OwnerGroupUsers));
			this._StaffGroupUsers = new EntitySet<StaffGroupUser>(new Action<StaffGroupUser>(this.attach_StaffGroupUsers), new Action<StaffGroupUser>(this.detach_StaffGroupUsers));
			this._TextOuts = new EntitySet<TextOut>(new Action<TextOut>(this.attach_TextOuts), new Action<TextOut>(this.detach_TextOuts));
			OnCreated();
		}
		
		[Column(Storage="_GroupUserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupUserID
		{
			get
			{
				return this._GroupUserID;
			}
			set
			{
				if ((this._GroupUserID != value))
				{
					this.OnGroupUserIDChanging(value);
					this.SendPropertyChanging();
					this._GroupUserID = value;
					this.SendPropertyChanged("GroupUserID");
					this.OnGroupUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupUserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string GroupUserName
		{
			get
			{
				return this._GroupUserName;
			}
			set
			{
				if ((this._GroupUserName != value))
				{
					this.OnGroupUserNameChanging(value);
					this.SendPropertyChanging();
					this._GroupUserName = value;
					this.SendPropertyChanged("GroupUserName");
					this.OnGroupUserNameChanged();
				}
			}
		}
		
		[Association(Name="GroupUser_OwnerGroupUser", Storage="_OwnerGroupUsers", OtherKey="GroupUserID")]
		public EntitySet<OwnerGroupUser> OwnerGroupUsers
		{
			get
			{
				return this._OwnerGroupUsers;
			}
			set
			{
				this._OwnerGroupUsers.Assign(value);
			}
		}
		
		[Association(Name="GroupUser_StaffGroupUser", Storage="_StaffGroupUsers", OtherKey="GroupUserID")]
		public EntitySet<StaffGroupUser> StaffGroupUsers
		{
			get
			{
				return this._StaffGroupUsers;
			}
			set
			{
				this._StaffGroupUsers.Assign(value);
			}
		}
		
		[Association(Name="GroupUser_TextOut", Storage="_TextOuts", OtherKey="GroupUserID")]
		public EntitySet<TextOut> TextOuts
		{
			get
			{
				return this._TextOuts;
			}
			set
			{
				this._TextOuts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerGroupUsers(OwnerGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = this;
		}
		
		private void detach_OwnerGroupUsers(OwnerGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = null;
		}
		
		private void attach_StaffGroupUsers(StaffGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = this;
		}
		
		private void detach_StaffGroupUsers(StaffGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = null;
		}
		
		private void attach_TextOuts(TextOut entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = this;
		}
		
		private void detach_TextOuts(TextOut entity)
		{
			this.SendPropertyChanging();
			entity.GroupUser = null;
		}
	}
	
	[Table(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MainMenuID;
		
		private System.Nullable<System.Guid> _ParentMenu;
		
		private string _MainMenuName;
		
		private string _MenuDescription;
		
		private int _MenuIndex;
		
		private bool _IsParentMenu;
		
		private string _MenuUrl;
		
		private string _MenuIcon;
		
		private bool _Enable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMainMenuIDChanging(System.Guid value);
    partial void OnMainMenuIDChanged();
    partial void OnParentMenuChanging(System.Nullable<System.Guid> value);
    partial void OnParentMenuChanged();
    partial void OnMainMenuNameChanging(string value);
    partial void OnMainMenuNameChanged();
    partial void OnMenuDescriptionChanging(string value);
    partial void OnMenuDescriptionChanged();
    partial void OnMenuIndexChanging(int value);
    partial void OnMenuIndexChanged();
    partial void OnIsParentMenuChanging(bool value);
    partial void OnIsParentMenuChanged();
    partial void OnMenuUrlChanging(string value);
    partial void OnMenuUrlChanged();
    partial void OnMenuIconChanging(string value);
    partial void OnMenuIconChanged();
    partial void OnEnableChanging(bool value);
    partial void OnEnableChanged();
    #endregion
		
		public Menu()
		{
			OnCreated();
		}
		
		[Column(Storage="_MainMenuID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MainMenuID
		{
			get
			{
				return this._MainMenuID;
			}
			set
			{
				if ((this._MainMenuID != value))
				{
					this.OnMainMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MainMenuID = value;
					this.SendPropertyChanged("MainMenuID");
					this.OnMainMenuIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentMenu", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentMenu
		{
			get
			{
				return this._ParentMenu;
			}
			set
			{
				if ((this._ParentMenu != value))
				{
					this.OnParentMenuChanging(value);
					this.SendPropertyChanging();
					this._ParentMenu = value;
					this.SendPropertyChanged("ParentMenu");
					this.OnParentMenuChanged();
				}
			}
		}
		
		[Column(Storage="_MainMenuName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MainMenuName
		{
			get
			{
				return this._MainMenuName;
			}
			set
			{
				if ((this._MainMenuName != value))
				{
					this.OnMainMenuNameChanging(value);
					this.SendPropertyChanging();
					this._MainMenuName = value;
					this.SendPropertyChanged("MainMenuName");
					this.OnMainMenuNameChanged();
				}
			}
		}
		
		[Column(Storage="_MenuDescription", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string MenuDescription
		{
			get
			{
				return this._MenuDescription;
			}
			set
			{
				if ((this._MenuDescription != value))
				{
					this.OnMenuDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MenuDescription = value;
					this.SendPropertyChanged("MenuDescription");
					this.OnMenuDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MenuIndex", DbType="Int NOT NULL")]
		public int MenuIndex
		{
			get
			{
				return this._MenuIndex;
			}
			set
			{
				if ((this._MenuIndex != value))
				{
					this.OnMenuIndexChanging(value);
					this.SendPropertyChanging();
					this._MenuIndex = value;
					this.SendPropertyChanged("MenuIndex");
					this.OnMenuIndexChanged();
				}
			}
		}
		
		[Column(Storage="_IsParentMenu", DbType="Bit NOT NULL")]
		public bool IsParentMenu
		{
			get
			{
				return this._IsParentMenu;
			}
			set
			{
				if ((this._IsParentMenu != value))
				{
					this.OnIsParentMenuChanging(value);
					this.SendPropertyChanging();
					this._IsParentMenu = value;
					this.SendPropertyChanged("IsParentMenu");
					this.OnIsParentMenuChanged();
				}
			}
		}
		
		[Column(Storage="_MenuUrl", DbType="NVarChar(250)")]
		public string MenuUrl
		{
			get
			{
				return this._MenuUrl;
			}
			set
			{
				if ((this._MenuUrl != value))
				{
					this.OnMenuUrlChanging(value);
					this.SendPropertyChanging();
					this._MenuUrl = value;
					this.SendPropertyChanged("MenuUrl");
					this.OnMenuUrlChanged();
				}
			}
		}
		
		[Column(Storage="_MenuIcon", DbType="NVarChar(100)")]
		public string MenuIcon
		{
			get
			{
				return this._MenuIcon;
			}
			set
			{
				if ((this._MenuIcon != value))
				{
					this.OnMenuIconChanging(value);
					this.SendPropertyChanging();
					this._MenuIcon = value;
					this.SendPropertyChanged("MenuIcon");
					this.OnMenuIconChanged();
				}
			}
		}
		
		[Column(Storage="_Enable", DbType="Bit NOT NULL")]
		public bool Enable
		{
			get
			{
				return this._Enable;
			}
			set
			{
				if ((this._Enable != value))
				{
					this.OnEnableChanging(value);
					this.SendPropertyChanging();
					this._Enable = value;
					this.SendPropertyChanged("Enable");
					this.OnEnableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OwnerAdmin")]
	public partial class OwnerAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OwnerAdminID;
		
		private bool _All;
		
		private bool _DepartmentReadOnly;
		
		private bool _DepartmentModify;
		
		private bool _DepartmentDelete;
		
		private bool _DepartmentCreate;
		
		private bool _GroupUserAdmin;
		
		private bool _StaffReadOnly;
		
		private bool _StaffModify;
		
		private bool _StaffDelete;
		
		private bool _StaffCreate;
		
		private bool _SystemLogView;
		
		private bool _SystemLogDelete;
		
		private bool _OwnerMenu;
		
		private EntitySet<OwnerGroupUser> _OwnerGroupUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerAdminIDChanging(System.Guid value);
    partial void OnOwnerAdminIDChanged();
    partial void OnAllChanging(bool value);
    partial void OnAllChanged();
    partial void OnDepartmentReadOnlyChanging(bool value);
    partial void OnDepartmentReadOnlyChanged();
    partial void OnDepartmentModifyChanging(bool value);
    partial void OnDepartmentModifyChanged();
    partial void OnDepartmentDeleteChanging(bool value);
    partial void OnDepartmentDeleteChanged();
    partial void OnDepartmentCreateChanging(bool value);
    partial void OnDepartmentCreateChanged();
    partial void OnGroupUserAdminChanging(bool value);
    partial void OnGroupUserAdminChanged();
    partial void OnStaffReadOnlyChanging(bool value);
    partial void OnStaffReadOnlyChanged();
    partial void OnStaffModifyChanging(bool value);
    partial void OnStaffModifyChanged();
    partial void OnStaffDeleteChanging(bool value);
    partial void OnStaffDeleteChanged();
    partial void OnStaffCreateChanging(bool value);
    partial void OnStaffCreateChanged();
    partial void OnSystemLogViewChanging(bool value);
    partial void OnSystemLogViewChanged();
    partial void OnSystemLogDeleteChanging(bool value);
    partial void OnSystemLogDeleteChanged();
    partial void OnOwnerMenuChanging(bool value);
    partial void OnOwnerMenuChanged();
    #endregion
		
		public OwnerAdmin()
		{
			this._OwnerGroupUsers = new EntitySet<OwnerGroupUser>(new Action<OwnerGroupUser>(this.attach_OwnerGroupUsers), new Action<OwnerGroupUser>(this.detach_OwnerGroupUsers));
			OnCreated();
		}
		
		[Column(Storage="_OwnerAdminID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OwnerAdminID
		{
			get
			{
				return this._OwnerAdminID;
			}
			set
			{
				if ((this._OwnerAdminID != value))
				{
					this.OnOwnerAdminIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerAdminID = value;
					this.SendPropertyChanged("OwnerAdminID");
					this.OnOwnerAdminIDChanged();
				}
			}
		}
		
		[Column(Name="[All]", Storage="_All", DbType="Bit NOT NULL")]
		public bool All
		{
			get
			{
				return this._All;
			}
			set
			{
				if ((this._All != value))
				{
					this.OnAllChanging(value);
					this.SendPropertyChanging();
					this._All = value;
					this.SendPropertyChanged("All");
					this.OnAllChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentReadOnly", DbType="Bit NOT NULL")]
		public bool DepartmentReadOnly
		{
			get
			{
				return this._DepartmentReadOnly;
			}
			set
			{
				if ((this._DepartmentReadOnly != value))
				{
					this.OnDepartmentReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._DepartmentReadOnly = value;
					this.SendPropertyChanged("DepartmentReadOnly");
					this.OnDepartmentReadOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentModify", DbType="Bit NOT NULL")]
		public bool DepartmentModify
		{
			get
			{
				return this._DepartmentModify;
			}
			set
			{
				if ((this._DepartmentModify != value))
				{
					this.OnDepartmentModifyChanging(value);
					this.SendPropertyChanging();
					this._DepartmentModify = value;
					this.SendPropertyChanged("DepartmentModify");
					this.OnDepartmentModifyChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentDelete", DbType="Bit NOT NULL")]
		public bool DepartmentDelete
		{
			get
			{
				return this._DepartmentDelete;
			}
			set
			{
				if ((this._DepartmentDelete != value))
				{
					this.OnDepartmentDeleteChanging(value);
					this.SendPropertyChanging();
					this._DepartmentDelete = value;
					this.SendPropertyChanged("DepartmentDelete");
					this.OnDepartmentDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentCreate", DbType="Bit NOT NULL")]
		public bool DepartmentCreate
		{
			get
			{
				return this._DepartmentCreate;
			}
			set
			{
				if ((this._DepartmentCreate != value))
				{
					this.OnDepartmentCreateChanging(value);
					this.SendPropertyChanging();
					this._DepartmentCreate = value;
					this.SendPropertyChanged("DepartmentCreate");
					this.OnDepartmentCreateChanged();
				}
			}
		}
		
		[Column(Storage="_GroupUserAdmin", DbType="Bit NOT NULL")]
		public bool GroupUserAdmin
		{
			get
			{
				return this._GroupUserAdmin;
			}
			set
			{
				if ((this._GroupUserAdmin != value))
				{
					this.OnGroupUserAdminChanging(value);
					this.SendPropertyChanging();
					this._GroupUserAdmin = value;
					this.SendPropertyChanged("GroupUserAdmin");
					this.OnGroupUserAdminChanged();
				}
			}
		}
		
		[Column(Storage="_StaffReadOnly", DbType="Bit NOT NULL")]
		public bool StaffReadOnly
		{
			get
			{
				return this._StaffReadOnly;
			}
			set
			{
				if ((this._StaffReadOnly != value))
				{
					this.OnStaffReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._StaffReadOnly = value;
					this.SendPropertyChanged("StaffReadOnly");
					this.OnStaffReadOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_StaffModify", DbType="Bit NOT NULL")]
		public bool StaffModify
		{
			get
			{
				return this._StaffModify;
			}
			set
			{
				if ((this._StaffModify != value))
				{
					this.OnStaffModifyChanging(value);
					this.SendPropertyChanging();
					this._StaffModify = value;
					this.SendPropertyChanged("StaffModify");
					this.OnStaffModifyChanged();
				}
			}
		}
		
		[Column(Storage="_StaffDelete", DbType="Bit NOT NULL")]
		public bool StaffDelete
		{
			get
			{
				return this._StaffDelete;
			}
			set
			{
				if ((this._StaffDelete != value))
				{
					this.OnStaffDeleteChanging(value);
					this.SendPropertyChanging();
					this._StaffDelete = value;
					this.SendPropertyChanged("StaffDelete");
					this.OnStaffDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_StaffCreate", DbType="Bit NOT NULL")]
		public bool StaffCreate
		{
			get
			{
				return this._StaffCreate;
			}
			set
			{
				if ((this._StaffCreate != value))
				{
					this.OnStaffCreateChanging(value);
					this.SendPropertyChanging();
					this._StaffCreate = value;
					this.SendPropertyChanged("StaffCreate");
					this.OnStaffCreateChanged();
				}
			}
		}
		
		[Column(Storage="_SystemLogView", DbType="Bit NOT NULL")]
		public bool SystemLogView
		{
			get
			{
				return this._SystemLogView;
			}
			set
			{
				if ((this._SystemLogView != value))
				{
					this.OnSystemLogViewChanging(value);
					this.SendPropertyChanging();
					this._SystemLogView = value;
					this.SendPropertyChanged("SystemLogView");
					this.OnSystemLogViewChanged();
				}
			}
		}
		
		[Column(Storage="_SystemLogDelete", DbType="Bit NOT NULL")]
		public bool SystemLogDelete
		{
			get
			{
				return this._SystemLogDelete;
			}
			set
			{
				if ((this._SystemLogDelete != value))
				{
					this.OnSystemLogDeleteChanging(value);
					this.SendPropertyChanging();
					this._SystemLogDelete = value;
					this.SendPropertyChanged("SystemLogDelete");
					this.OnSystemLogDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerMenu", DbType="Bit NOT NULL")]
		public bool OwnerMenu
		{
			get
			{
				return this._OwnerMenu;
			}
			set
			{
				if ((this._OwnerMenu != value))
				{
					this.OnOwnerMenuChanging(value);
					this.SendPropertyChanging();
					this._OwnerMenu = value;
					this.SendPropertyChanged("OwnerMenu");
					this.OnOwnerMenuChanged();
				}
			}
		}
		
		[Association(Name="OwnerAdmin_OwnerGroupUser", Storage="_OwnerGroupUsers", OtherKey="OwnerAdminID")]
		public EntitySet<OwnerGroupUser> OwnerGroupUsers
		{
			get
			{
				return this._OwnerGroupUsers;
			}
			set
			{
				this._OwnerGroupUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerGroupUsers(OwnerGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.OwnerAdmin = this;
		}
		
		private void detach_OwnerGroupUsers(OwnerGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.OwnerAdmin = null;
		}
	}
	
	[Table(Name="dbo.OwnerCalendar")]
	public partial class OwnerCalendar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OwnerCalendarID;
		
		private bool _All;
		
		private bool _ReadOnly;
		
		private bool _ModifyStateWork;
		
		private bool _DeleteCalendar;
		
		private bool _CreateCalendar;
		
		private EntitySet<OwnerGroupUser> _OwnerGroupUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerCalendarIDChanging(System.Guid value);
    partial void OnOwnerCalendarIDChanged();
    partial void OnAllChanging(bool value);
    partial void OnAllChanged();
    partial void OnReadOnlyChanging(bool value);
    partial void OnReadOnlyChanged();
    partial void OnModifyStateWorkChanging(bool value);
    partial void OnModifyStateWorkChanged();
    partial void OnDeleteCalendarChanging(bool value);
    partial void OnDeleteCalendarChanged();
    partial void OnCreateCalendarChanging(bool value);
    partial void OnCreateCalendarChanged();
    #endregion
		
		public OwnerCalendar()
		{
			this._OwnerGroupUsers = new EntitySet<OwnerGroupUser>(new Action<OwnerGroupUser>(this.attach_OwnerGroupUsers), new Action<OwnerGroupUser>(this.detach_OwnerGroupUsers));
			OnCreated();
		}
		
		[Column(Storage="_OwnerCalendarID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OwnerCalendarID
		{
			get
			{
				return this._OwnerCalendarID;
			}
			set
			{
				if ((this._OwnerCalendarID != value))
				{
					this.OnOwnerCalendarIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerCalendarID = value;
					this.SendPropertyChanged("OwnerCalendarID");
					this.OnOwnerCalendarIDChanged();
				}
			}
		}
		
		[Column(Name="[All]", Storage="_All", DbType="Bit NOT NULL")]
		public bool All
		{
			get
			{
				return this._All;
			}
			set
			{
				if ((this._All != value))
				{
					this.OnAllChanging(value);
					this.SendPropertyChanging();
					this._All = value;
					this.SendPropertyChanged("All");
					this.OnAllChanged();
				}
			}
		}
		
		[Column(Storage="_ReadOnly", DbType="Bit NOT NULL")]
		public bool ReadOnly
		{
			get
			{
				return this._ReadOnly;
			}
			set
			{
				if ((this._ReadOnly != value))
				{
					this.OnReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._ReadOnly = value;
					this.SendPropertyChanged("ReadOnly");
					this.OnReadOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_ModifyStateWork", DbType="Bit NOT NULL")]
		public bool ModifyStateWork
		{
			get
			{
				return this._ModifyStateWork;
			}
			set
			{
				if ((this._ModifyStateWork != value))
				{
					this.OnModifyStateWorkChanging(value);
					this.SendPropertyChanging();
					this._ModifyStateWork = value;
					this.SendPropertyChanged("ModifyStateWork");
					this.OnModifyStateWorkChanged();
				}
			}
		}
		
		[Column(Storage="_DeleteCalendar", DbType="Bit NOT NULL")]
		public bool DeleteCalendar
		{
			get
			{
				return this._DeleteCalendar;
			}
			set
			{
				if ((this._DeleteCalendar != value))
				{
					this.OnDeleteCalendarChanging(value);
					this.SendPropertyChanging();
					this._DeleteCalendar = value;
					this.SendPropertyChanged("DeleteCalendar");
					this.OnDeleteCalendarChanged();
				}
			}
		}
		
		[Column(Storage="_CreateCalendar", DbType="Bit NOT NULL")]
		public bool CreateCalendar
		{
			get
			{
				return this._CreateCalendar;
			}
			set
			{
				if ((this._CreateCalendar != value))
				{
					this.OnCreateCalendarChanging(value);
					this.SendPropertyChanging();
					this._CreateCalendar = value;
					this.SendPropertyChanged("CreateCalendar");
					this.OnCreateCalendarChanged();
				}
			}
		}
		
		[Association(Name="OwnerCalendar_OwnerGroupUser", Storage="_OwnerGroupUsers", OtherKey="OwnerCalendarID")]
		public EntitySet<OwnerGroupUser> OwnerGroupUsers
		{
			get
			{
				return this._OwnerGroupUsers;
			}
			set
			{
				this._OwnerGroupUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerGroupUsers(OwnerGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.OwnerCalendar = this;
		}
		
		private void detach_OwnerGroupUsers(OwnerGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.OwnerCalendar = null;
		}
	}
	
	[Table(Name="dbo.OwnerGroupUser")]
	public partial class OwnerGroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OwnerGroupUserID;
		
		private System.Guid _GroupUserID;
		
		private System.Guid _OwnerTextID;
		
		private System.Guid _OwnerCalendarID;
		
		private System.Guid _OwnerAdminID;
		
		private EntityRef<GroupUser> _GroupUser;
		
		private EntityRef<OwnerAdmin> _OwnerAdmin;
		
		private EntityRef<OwnerCalendar> _OwnerCalendar;
		
		private EntityRef<OwnerText> _OwnerText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerGroupUserIDChanging(System.Guid value);
    partial void OnOwnerGroupUserIDChanged();
    partial void OnGroupUserIDChanging(System.Guid value);
    partial void OnGroupUserIDChanged();
    partial void OnOwnerTextIDChanging(System.Guid value);
    partial void OnOwnerTextIDChanged();
    partial void OnOwnerCalendarIDChanging(System.Guid value);
    partial void OnOwnerCalendarIDChanged();
    partial void OnOwnerAdminIDChanging(System.Guid value);
    partial void OnOwnerAdminIDChanged();
    #endregion
		
		public OwnerGroupUser()
		{
			this._GroupUser = default(EntityRef<GroupUser>);
			this._OwnerAdmin = default(EntityRef<OwnerAdmin>);
			this._OwnerCalendar = default(EntityRef<OwnerCalendar>);
			this._OwnerText = default(EntityRef<OwnerText>);
			OnCreated();
		}
		
		[Column(Storage="_OwnerGroupUserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OwnerGroupUserID
		{
			get
			{
				return this._OwnerGroupUserID;
			}
			set
			{
				if ((this._OwnerGroupUserID != value))
				{
					this.OnOwnerGroupUserIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerGroupUserID = value;
					this.SendPropertyChanged("OwnerGroupUserID");
					this.OnOwnerGroupUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupUserID
		{
			get
			{
				return this._GroupUserID;
			}
			set
			{
				if ((this._GroupUserID != value))
				{
					if (this._GroupUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserIDChanging(value);
					this.SendPropertyChanging();
					this._GroupUserID = value;
					this.SendPropertyChanged("GroupUserID");
					this.OnGroupUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerTextID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OwnerTextID
		{
			get
			{
				return this._OwnerTextID;
			}
			set
			{
				if ((this._OwnerTextID != value))
				{
					if (this._OwnerText.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerTextIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerTextID = value;
					this.SendPropertyChanged("OwnerTextID");
					this.OnOwnerTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerCalendarID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OwnerCalendarID
		{
			get
			{
				return this._OwnerCalendarID;
			}
			set
			{
				if ((this._OwnerCalendarID != value))
				{
					if (this._OwnerCalendar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerCalendarIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerCalendarID = value;
					this.SendPropertyChanged("OwnerCalendarID");
					this.OnOwnerCalendarIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerAdminID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OwnerAdminID
		{
			get
			{
				return this._OwnerAdminID;
			}
			set
			{
				if ((this._OwnerAdminID != value))
				{
					if (this._OwnerAdmin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerAdminIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerAdminID = value;
					this.SendPropertyChanged("OwnerAdminID");
					this.OnOwnerAdminIDChanged();
				}
			}
		}
		
		[Association(Name="GroupUser_OwnerGroupUser", Storage="_GroupUser", ThisKey="GroupUserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GroupUser GroupUser
		{
			get
			{
				return this._GroupUser.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser.Entity = null;
						previousValue.OwnerGroupUsers.Remove(this);
					}
					this._GroupUser.Entity = value;
					if ((value != null))
					{
						value.OwnerGroupUsers.Add(this);
						this._GroupUserID = value.GroupUserID;
					}
					else
					{
						this._GroupUserID = default(System.Guid);
					}
					this.SendPropertyChanged("GroupUser");
				}
			}
		}
		
		[Association(Name="OwnerAdmin_OwnerGroupUser", Storage="_OwnerAdmin", ThisKey="OwnerAdminID", IsForeignKey=true)]
		public OwnerAdmin OwnerAdmin
		{
			get
			{
				return this._OwnerAdmin.Entity;
			}
			set
			{
				OwnerAdmin previousValue = this._OwnerAdmin.Entity;
				if (((previousValue != value) 
							|| (this._OwnerAdmin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerAdmin.Entity = null;
						previousValue.OwnerGroupUsers.Remove(this);
					}
					this._OwnerAdmin.Entity = value;
					if ((value != null))
					{
						value.OwnerGroupUsers.Add(this);
						this._OwnerAdminID = value.OwnerAdminID;
					}
					else
					{
						this._OwnerAdminID = default(System.Guid);
					}
					this.SendPropertyChanged("OwnerAdmin");
				}
			}
		}
		
		[Association(Name="OwnerCalendar_OwnerGroupUser", Storage="_OwnerCalendar", ThisKey="OwnerCalendarID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public OwnerCalendar OwnerCalendar
		{
			get
			{
				return this._OwnerCalendar.Entity;
			}
			set
			{
				OwnerCalendar previousValue = this._OwnerCalendar.Entity;
				if (((previousValue != value) 
							|| (this._OwnerCalendar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerCalendar.Entity = null;
						previousValue.OwnerGroupUsers.Remove(this);
					}
					this._OwnerCalendar.Entity = value;
					if ((value != null))
					{
						value.OwnerGroupUsers.Add(this);
						this._OwnerCalendarID = value.OwnerCalendarID;
					}
					else
					{
						this._OwnerCalendarID = default(System.Guid);
					}
					this.SendPropertyChanged("OwnerCalendar");
				}
			}
		}
		
		[Association(Name="OwnerText_OwnerGroupUser", Storage="_OwnerText", ThisKey="OwnerTextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public OwnerText OwnerText
		{
			get
			{
				return this._OwnerText.Entity;
			}
			set
			{
				OwnerText previousValue = this._OwnerText.Entity;
				if (((previousValue != value) 
							|| (this._OwnerText.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerText.Entity = null;
						previousValue.OwnerGroupUsers.Remove(this);
					}
					this._OwnerText.Entity = value;
					if ((value != null))
					{
						value.OwnerGroupUsers.Add(this);
						this._OwnerTextID = value.OwnerTextID;
					}
					else
					{
						this._OwnerTextID = default(System.Guid);
					}
					this.SendPropertyChanged("OwnerText");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OwnerText")]
	public partial class OwnerText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OwnerTextID;
		
		private bool _All;
		
		private bool _BookReadOnly;
		
		private bool _BookModify;
		
		private bool _BookDelete;
		
		private bool _BookCreate;
		
		private bool _BookManagement;
		
		private bool _TypeTextAdmin;
		
		private bool _TextLevelAdmin;
		
		private bool _TextSecurityAdmin;
		
		private bool _OtherContactAdmin;
		
		private EntitySet<OwnerGroupUser> _OwnerGroupUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerTextIDChanging(System.Guid value);
    partial void OnOwnerTextIDChanged();
    partial void OnAllChanging(bool value);
    partial void OnAllChanged();
    partial void OnBookReadOnlyChanging(bool value);
    partial void OnBookReadOnlyChanged();
    partial void OnBookModifyChanging(bool value);
    partial void OnBookModifyChanged();
    partial void OnBookDeleteChanging(bool value);
    partial void OnBookDeleteChanged();
    partial void OnBookCreateChanging(bool value);
    partial void OnBookCreateChanged();
    partial void OnBookManagementChanging(bool value);
    partial void OnBookManagementChanged();
    partial void OnTypeTextAdminChanging(bool value);
    partial void OnTypeTextAdminChanged();
    partial void OnTextLevelAdminChanging(bool value);
    partial void OnTextLevelAdminChanged();
    partial void OnTextSecurityAdminChanging(bool value);
    partial void OnTextSecurityAdminChanged();
    partial void OnOtherContactAdminChanging(bool value);
    partial void OnOtherContactAdminChanged();
    #endregion
		
		public OwnerText()
		{
			this._OwnerGroupUsers = new EntitySet<OwnerGroupUser>(new Action<OwnerGroupUser>(this.attach_OwnerGroupUsers), new Action<OwnerGroupUser>(this.detach_OwnerGroupUsers));
			OnCreated();
		}
		
		[Column(Storage="_OwnerTextID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OwnerTextID
		{
			get
			{
				return this._OwnerTextID;
			}
			set
			{
				if ((this._OwnerTextID != value))
				{
					this.OnOwnerTextIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerTextID = value;
					this.SendPropertyChanged("OwnerTextID");
					this.OnOwnerTextIDChanged();
				}
			}
		}
		
		[Column(Name="[All]", Storage="_All", DbType="Bit NOT NULL")]
		public bool All
		{
			get
			{
				return this._All;
			}
			set
			{
				if ((this._All != value))
				{
					this.OnAllChanging(value);
					this.SendPropertyChanging();
					this._All = value;
					this.SendPropertyChanged("All");
					this.OnAllChanged();
				}
			}
		}
		
		[Column(Storage="_BookReadOnly", DbType="Bit NOT NULL")]
		public bool BookReadOnly
		{
			get
			{
				return this._BookReadOnly;
			}
			set
			{
				if ((this._BookReadOnly != value))
				{
					this.OnBookReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._BookReadOnly = value;
					this.SendPropertyChanged("BookReadOnly");
					this.OnBookReadOnlyChanged();
				}
			}
		}
		
		[Column(Storage="_BookModify", DbType="Bit NOT NULL")]
		public bool BookModify
		{
			get
			{
				return this._BookModify;
			}
			set
			{
				if ((this._BookModify != value))
				{
					this.OnBookModifyChanging(value);
					this.SendPropertyChanging();
					this._BookModify = value;
					this.SendPropertyChanged("BookModify");
					this.OnBookModifyChanged();
				}
			}
		}
		
		[Column(Storage="_BookDelete", DbType="Bit NOT NULL")]
		public bool BookDelete
		{
			get
			{
				return this._BookDelete;
			}
			set
			{
				if ((this._BookDelete != value))
				{
					this.OnBookDeleteChanging(value);
					this.SendPropertyChanging();
					this._BookDelete = value;
					this.SendPropertyChanged("BookDelete");
					this.OnBookDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_BookCreate", DbType="Bit NOT NULL")]
		public bool BookCreate
		{
			get
			{
				return this._BookCreate;
			}
			set
			{
				if ((this._BookCreate != value))
				{
					this.OnBookCreateChanging(value);
					this.SendPropertyChanging();
					this._BookCreate = value;
					this.SendPropertyChanged("BookCreate");
					this.OnBookCreateChanged();
				}
			}
		}
		
		[Column(Storage="_BookManagement", DbType="Bit NOT NULL")]
		public bool BookManagement
		{
			get
			{
				return this._BookManagement;
			}
			set
			{
				if ((this._BookManagement != value))
				{
					this.OnBookManagementChanging(value);
					this.SendPropertyChanging();
					this._BookManagement = value;
					this.SendPropertyChanged("BookManagement");
					this.OnBookManagementChanged();
				}
			}
		}
		
		[Column(Storage="_TypeTextAdmin", DbType="Bit NOT NULL")]
		public bool TypeTextAdmin
		{
			get
			{
				return this._TypeTextAdmin;
			}
			set
			{
				if ((this._TypeTextAdmin != value))
				{
					this.OnTypeTextAdminChanging(value);
					this.SendPropertyChanging();
					this._TypeTextAdmin = value;
					this.SendPropertyChanged("TypeTextAdmin");
					this.OnTypeTextAdminChanged();
				}
			}
		}
		
		[Column(Storage="_TextLevelAdmin", DbType="Bit NOT NULL")]
		public bool TextLevelAdmin
		{
			get
			{
				return this._TextLevelAdmin;
			}
			set
			{
				if ((this._TextLevelAdmin != value))
				{
					this.OnTextLevelAdminChanging(value);
					this.SendPropertyChanging();
					this._TextLevelAdmin = value;
					this.SendPropertyChanged("TextLevelAdmin");
					this.OnTextLevelAdminChanged();
				}
			}
		}
		
		[Column(Storage="_TextSecurityAdmin", DbType="Bit NOT NULL")]
		public bool TextSecurityAdmin
		{
			get
			{
				return this._TextSecurityAdmin;
			}
			set
			{
				if ((this._TextSecurityAdmin != value))
				{
					this.OnTextSecurityAdminChanging(value);
					this.SendPropertyChanging();
					this._TextSecurityAdmin = value;
					this.SendPropertyChanged("TextSecurityAdmin");
					this.OnTextSecurityAdminChanged();
				}
			}
		}
		
		[Column(Storage="_OtherContactAdmin", DbType="Bit NOT NULL")]
		public bool OtherContactAdmin
		{
			get
			{
				return this._OtherContactAdmin;
			}
			set
			{
				if ((this._OtherContactAdmin != value))
				{
					this.OnOtherContactAdminChanging(value);
					this.SendPropertyChanging();
					this._OtherContactAdmin = value;
					this.SendPropertyChanged("OtherContactAdmin");
					this.OnOtherContactAdminChanged();
				}
			}
		}
		
		[Association(Name="OwnerText_OwnerGroupUser", Storage="_OwnerGroupUsers", OtherKey="OwnerTextID")]
		public EntitySet<OwnerGroupUser> OwnerGroupUsers
		{
			get
			{
				return this._OwnerGroupUsers;
			}
			set
			{
				this._OwnerGroupUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerGroupUsers(OwnerGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.OwnerText = this;
		}
		
		private void detach_OwnerGroupUsers(OwnerGroupUser entity)
		{
			this.SendPropertyChanging();
			entity.OwnerText = null;
		}
	}
	
	[Table(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StaffID;
		
		private System.Guid _DepartmentID;
		
		private bool _IsCharge;
		
		private string _StaffName;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _Address;
		
		private string _PhoneNumber;
		
		private System.Guid _AcountID;
		
		private string _EmailAddress;
		
		private bool _IsDeleted;
		
		private EntityRef<StaffGroupUser> _StaffGroupUser;
		
		private EntitySet<TextOut> _TextOuts;
		
		private EntitySet<TextTo> _TextTos;
		
		private EntitySet<TextTo> _TextTos1;
		
		private EntityRef<Acount> _Acount;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(System.Guid value);
    partial void OnStaffIDChanged();
    partial void OnDepartmentIDChanging(System.Guid value);
    partial void OnDepartmentIDChanged();
    partial void OnIsChargeChanging(bool value);
    partial void OnIsChargeChanged();
    partial void OnStaffNameChanging(string value);
    partial void OnStaffNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAcountIDChanging(System.Guid value);
    partial void OnAcountIDChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Staff()
		{
			this._StaffGroupUser = default(EntityRef<StaffGroupUser>);
			this._TextOuts = new EntitySet<TextOut>(new Action<TextOut>(this.attach_TextOuts), new Action<TextOut>(this.detach_TextOuts));
			this._TextTos = new EntitySet<TextTo>(new Action<TextTo>(this.attach_TextTos), new Action<TextTo>(this.detach_TextTos));
			this._TextTos1 = new EntitySet<TextTo>(new Action<TextTo>(this.attach_TextTos1), new Action<TextTo>(this.detach_TextTos1));
			this._Acount = default(EntityRef<Acount>);
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[Column(Storage="_StaffID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsCharge", DbType="Bit NOT NULL")]
		public bool IsCharge
		{
			get
			{
				return this._IsCharge;
			}
			set
			{
				if ((this._IsCharge != value))
				{
					this.OnIsChargeChanging(value);
					this.SendPropertyChanging();
					this._IsCharge = value;
					this.SendPropertyChanged("IsCharge");
					this.OnIsChargeChanged();
				}
			}
		}
		
		[Column(Storage="_StaffName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this.OnStaffNameChanging(value);
					this.SendPropertyChanging();
					this._StaffName = value;
					this.SendPropertyChanged("StaffName");
					this.OnStaffNameChanged();
				}
			}
		}
		
		[Column(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="NVarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AcountID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AcountID
		{
			get
			{
				return this._AcountID;
			}
			set
			{
				if ((this._AcountID != value))
				{
					if (this._Acount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcountIDChanging(value);
					this.SendPropertyChanging();
					this._AcountID = value;
					this.SendPropertyChanged("AcountID");
					this.OnAcountIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Staff_StaffGroupUser", Storage="_StaffGroupUser", ThisKey="StaffID", IsUnique=true, IsForeignKey=false)]
		public StaffGroupUser StaffGroupUser
		{
			get
			{
				return this._StaffGroupUser.Entity;
			}
			set
			{
				StaffGroupUser previousValue = this._StaffGroupUser.Entity;
				if (((previousValue != value) 
							|| (this._StaffGroupUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffGroupUser.Entity = null;
						previousValue.Staff = null;
					}
					this._StaffGroupUser.Entity = value;
					if ((value != null))
					{
						value.Staff = this;
					}
					this.SendPropertyChanged("StaffGroupUser");
				}
			}
		}
		
		[Association(Name="Staff_TextOut", Storage="_TextOuts", OtherKey="StaffID")]
		public EntitySet<TextOut> TextOuts
		{
			get
			{
				return this._TextOuts;
			}
			set
			{
				this._TextOuts.Assign(value);
			}
		}
		
		[Association(Name="Staff_TextTo", Storage="_TextTos", OtherKey="StaffFromID")]
		public EntitySet<TextTo> TextTos
		{
			get
			{
				return this._TextTos;
			}
			set
			{
				this._TextTos.Assign(value);
			}
		}
		
		[Association(Name="Staff_TextTo1", Storage="_TextTos1", OtherKey="StaffToID")]
		public EntitySet<TextTo> TextTos1
		{
			get
			{
				return this._TextTos1;
			}
			set
			{
				this._TextTos1.Assign(value);
			}
		}
		
		[Association(Name="Acount_Staff", Storage="_Acount", ThisKey="AcountID", IsForeignKey=true)]
		public Acount Acount
		{
			get
			{
				return this._Acount.Entity;
			}
			set
			{
				Acount previousValue = this._Acount.Entity;
				if (((previousValue != value) 
							|| (this._Acount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Acount.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Acount.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._AcountID = value.AcountID;
					}
					else
					{
						this._AcountID = default(System.Guid);
					}
					this.SendPropertyChanged("Acount");
				}
			}
		}
		
		[Association(Name="Department_Staff", Storage="_Department", ThisKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TextOuts(TextOut entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_TextOuts(TextOut entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_TextTos(TextTo entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_TextTos(TextTo entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_TextTos1(TextTo entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_TextTos1(TextTo entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
	}
	
	[Table(Name="dbo.StaffGroupUser")]
	public partial class StaffGroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StaffID;
		
		private System.Guid _GroupUserID;
		
		private EntityRef<GroupUser> _GroupUser;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(System.Guid value);
    partial void OnStaffIDChanged();
    partial void OnGroupUserIDChanging(System.Guid value);
    partial void OnGroupUserIDChanged();
    #endregion
		
		public StaffGroupUser()
		{
			this._GroupUser = default(EntityRef<GroupUser>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[Column(Storage="_StaffID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupUserID
		{
			get
			{
				return this._GroupUserID;
			}
			set
			{
				if ((this._GroupUserID != value))
				{
					if (this._GroupUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserIDChanging(value);
					this.SendPropertyChanging();
					this._GroupUserID = value;
					this.SendPropertyChanged("GroupUserID");
					this.OnGroupUserIDChanged();
				}
			}
		}
		
		[Association(Name="GroupUser_StaffGroupUser", Storage="_GroupUser", ThisKey="GroupUserID", IsForeignKey=true)]
		public GroupUser GroupUser
		{
			get
			{
				return this._GroupUser.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser.Entity = null;
						previousValue.StaffGroupUsers.Remove(this);
					}
					this._GroupUser.Entity = value;
					if ((value != null))
					{
						value.StaffGroupUsers.Add(this);
						this._GroupUserID = value.GroupUserID;
					}
					else
					{
						this._GroupUserID = default(System.Guid);
					}
					this.SendPropertyChanged("GroupUser");
				}
			}
		}
		
		[Association(Name="Staff_StaffGroupUser", Storage="_Staff", ThisKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.StaffGroupUser = null;
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.StaffGroupUser = this;
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(System.Guid);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StateTextTo")]
	public partial class StateTextTo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _StateTextToID;
		
		private string _StateTextToName;
		
		private string _IconUrl;
		
		private EntitySet<TextTo> _TextTos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateTextToIDChanging(System.Guid value);
    partial void OnStateTextToIDChanged();
    partial void OnStateTextToNameChanging(string value);
    partial void OnStateTextToNameChanged();
    partial void OnIconUrlChanging(string value);
    partial void OnIconUrlChanged();
    #endregion
		
		public StateTextTo()
		{
			this._TextTos = new EntitySet<TextTo>(new Action<TextTo>(this.attach_TextTos), new Action<TextTo>(this.detach_TextTos));
			OnCreated();
		}
		
		[Column(Storage="_StateTextToID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid StateTextToID
		{
			get
			{
				return this._StateTextToID;
			}
			set
			{
				if ((this._StateTextToID != value))
				{
					this.OnStateTextToIDChanging(value);
					this.SendPropertyChanging();
					this._StateTextToID = value;
					this.SendPropertyChanged("StateTextToID");
					this.OnStateTextToIDChanged();
				}
			}
		}
		
		[Column(Storage="_StateTextToName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StateTextToName
		{
			get
			{
				return this._StateTextToName;
			}
			set
			{
				if ((this._StateTextToName != value))
				{
					this.OnStateTextToNameChanging(value);
					this.SendPropertyChanging();
					this._StateTextToName = value;
					this.SendPropertyChanged("StateTextToName");
					this.OnStateTextToNameChanged();
				}
			}
		}
		
		[Column(Storage="_IconUrl", DbType="NVarChar(300)")]
		public string IconUrl
		{
			get
			{
				return this._IconUrl;
			}
			set
			{
				if ((this._IconUrl != value))
				{
					this.OnIconUrlChanging(value);
					this.SendPropertyChanging();
					this._IconUrl = value;
					this.SendPropertyChanged("IconUrl");
					this.OnIconUrlChanged();
				}
			}
		}
		
		[Association(Name="StateTextTo_TextTo", Storage="_TextTos", OtherKey="StateTextToID")]
		public EntitySet<TextTo> TextTos
		{
			get
			{
				return this._TextTos;
			}
			set
			{
				this._TextTos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TextTos(TextTo entity)
		{
			this.SendPropertyChanging();
			entity.StateTextTo = this;
		}
		
		private void detach_TextTos(TextTo entity)
		{
			this.SendPropertyChanging();
			entity.StateTextTo = null;
		}
	}
	
	[Table(Name="dbo.SystemLog")]
	public partial class SystemLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SystemLogID;
		
		private string _ClientIP;
		
		private System.Guid _AcountID;
		
		private string _DescriptionAction;
		
		private System.DateTime _LogDate;
		
		private EntityRef<Acount> _Acount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemLogIDChanging(System.Guid value);
    partial void OnSystemLogIDChanged();
    partial void OnClientIPChanging(string value);
    partial void OnClientIPChanged();
    partial void OnAcountIDChanging(System.Guid value);
    partial void OnAcountIDChanged();
    partial void OnDescriptionActionChanging(string value);
    partial void OnDescriptionActionChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    #endregion
		
		public SystemLog()
		{
			this._Acount = default(EntityRef<Acount>);
			OnCreated();
		}
		
		[Column(Storage="_SystemLogID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SystemLogID
		{
			get
			{
				return this._SystemLogID;
			}
			set
			{
				if ((this._SystemLogID != value))
				{
					this.OnSystemLogIDChanging(value);
					this.SendPropertyChanging();
					this._SystemLogID = value;
					this.SendPropertyChanged("SystemLogID");
					this.OnSystemLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClientIP", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ClientIP
		{
			get
			{
				return this._ClientIP;
			}
			set
			{
				if ((this._ClientIP != value))
				{
					this.OnClientIPChanging(value);
					this.SendPropertyChanging();
					this._ClientIP = value;
					this.SendPropertyChanged("ClientIP");
					this.OnClientIPChanged();
				}
			}
		}
		
		[Column(Storage="_AcountID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AcountID
		{
			get
			{
				return this._AcountID;
			}
			set
			{
				if ((this._AcountID != value))
				{
					if (this._Acount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcountIDChanging(value);
					this.SendPropertyChanging();
					this._AcountID = value;
					this.SendPropertyChanged("AcountID");
					this.OnAcountIDChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionAction", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string DescriptionAction
		{
			get
			{
				return this._DescriptionAction;
			}
			set
			{
				if ((this._DescriptionAction != value))
				{
					this.OnDescriptionActionChanging(value);
					this.SendPropertyChanging();
					this._DescriptionAction = value;
					this.SendPropertyChanged("DescriptionAction");
					this.OnDescriptionActionChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Association(Name="Acount_SystemLog", Storage="_Acount", ThisKey="AcountID", IsForeignKey=true)]
		public Acount Acount
		{
			get
			{
				return this._Acount.Entity;
			}
			set
			{
				Acount previousValue = this._Acount.Entity;
				if (((previousValue != value) 
							|| (this._Acount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Acount.Entity = null;
						previousValue.SystemLogs.Remove(this);
					}
					this._Acount.Entity = value;
					if ((value != null))
					{
						value.SystemLogs.Add(this);
						this._AcountID = value.AcountID;
					}
					else
					{
						this._AcountID = default(System.Guid);
					}
					this.SendPropertyChanged("Acount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Text")]
	public partial class Text : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TextID;
		
		private System.Guid _TypeTextID;
		
		private bool _IsInternalDocuments;
		
		private System.Nullable<System.Guid> _DepartmentAddressID;
		
		private string _TextNoCode;
		
		private System.DateTime _DateCreate;
		
		private string _Signer;
		
		private System.Guid _TextLevelID;
		
		private System.Guid _TextSecurityID;
		
		private bool _NeedTreated;
		
		private bool _IsDeleted;
		
		private EntitySet<TextAttachment> _TextAttachments;
		
		private EntityRef<TextInBook> _TextInBook;
		
		private EntitySet<TextInbox> _TextInboxes;
		
		private EntityRef<DepartmentAddress> _DepartmentAddress;
		
		private EntityRef<TextLevel> _TextLevel;
		
		private EntityRef<TextSecurity> _TextSecurity;
		
		private EntityRef<TypeText> _TypeText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextIDChanging(System.Guid value);
    partial void OnTextIDChanged();
    partial void OnTypeTextIDChanging(System.Guid value);
    partial void OnTypeTextIDChanged();
    partial void OnIsInternalDocumentsChanging(bool value);
    partial void OnIsInternalDocumentsChanged();
    partial void OnDepartmentAddressIDChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentAddressIDChanged();
    partial void OnTextNoCodeChanging(string value);
    partial void OnTextNoCodeChanged();
    partial void OnDateCreateChanging(System.DateTime value);
    partial void OnDateCreateChanged();
    partial void OnSignerChanging(string value);
    partial void OnSignerChanged();
    partial void OnTextLevelIDChanging(System.Guid value);
    partial void OnTextLevelIDChanged();
    partial void OnTextSecurityIDChanging(System.Guid value);
    partial void OnTextSecurityIDChanged();
    partial void OnNeedTreatedChanging(bool value);
    partial void OnNeedTreatedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Text()
		{
			this._TextAttachments = new EntitySet<TextAttachment>(new Action<TextAttachment>(this.attach_TextAttachments), new Action<TextAttachment>(this.detach_TextAttachments));
			this._TextInBook = default(EntityRef<TextInBook>);
			this._TextInboxes = new EntitySet<TextInbox>(new Action<TextInbox>(this.attach_TextInboxes), new Action<TextInbox>(this.detach_TextInboxes));
			this._DepartmentAddress = default(EntityRef<DepartmentAddress>);
			this._TextLevel = default(EntityRef<TextLevel>);
			this._TextSecurity = default(EntityRef<TextSecurity>);
			this._TypeText = default(EntityRef<TypeText>);
			OnCreated();
		}
		
		[Column(Storage="_TextID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TextID
		{
			get
			{
				return this._TextID;
			}
			set
			{
				if ((this._TextID != value))
				{
					this.OnTextIDChanging(value);
					this.SendPropertyChanging();
					this._TextID = value;
					this.SendPropertyChanged("TextID");
					this.OnTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeTextID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TypeTextID
		{
			get
			{
				return this._TypeTextID;
			}
			set
			{
				if ((this._TypeTextID != value))
				{
					if (this._TypeText.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeTextIDChanging(value);
					this.SendPropertyChanging();
					this._TypeTextID = value;
					this.SendPropertyChanged("TypeTextID");
					this.OnTypeTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsInternalDocuments", DbType="Bit NOT NULL")]
		public bool IsInternalDocuments
		{
			get
			{
				return this._IsInternalDocuments;
			}
			set
			{
				if ((this._IsInternalDocuments != value))
				{
					this.OnIsInternalDocumentsChanging(value);
					this.SendPropertyChanging();
					this._IsInternalDocuments = value;
					this.SendPropertyChanged("IsInternalDocuments");
					this.OnIsInternalDocumentsChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentAddressID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentAddressID
		{
			get
			{
				return this._DepartmentAddressID;
			}
			set
			{
				if ((this._DepartmentAddressID != value))
				{
					if (this._DepartmentAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentAddressIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentAddressID = value;
					this.SendPropertyChanged("DepartmentAddressID");
					this.OnDepartmentAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextNoCode", DbType="NVarChar(50)")]
		public string TextNoCode
		{
			get
			{
				return this._TextNoCode;
			}
			set
			{
				if ((this._TextNoCode != value))
				{
					this.OnTextNoCodeChanging(value);
					this.SendPropertyChanging();
					this._TextNoCode = value;
					this.SendPropertyChanged("TextNoCode");
					this.OnTextNoCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreate", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreate
		{
			get
			{
				return this._DateCreate;
			}
			set
			{
				if ((this._DateCreate != value))
				{
					this.OnDateCreateChanging(value);
					this.SendPropertyChanging();
					this._DateCreate = value;
					this.SendPropertyChanged("DateCreate");
					this.OnDateCreateChanged();
				}
			}
		}
		
		[Column(Storage="_Signer", DbType="NVarChar(50)")]
		public string Signer
		{
			get
			{
				return this._Signer;
			}
			set
			{
				if ((this._Signer != value))
				{
					this.OnSignerChanging(value);
					this.SendPropertyChanging();
					this._Signer = value;
					this.SendPropertyChanged("Signer");
					this.OnSignerChanged();
				}
			}
		}
		
		[Column(Storage="_TextLevelID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TextLevelID
		{
			get
			{
				return this._TextLevelID;
			}
			set
			{
				if ((this._TextLevelID != value))
				{
					if (this._TextLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextLevelIDChanging(value);
					this.SendPropertyChanging();
					this._TextLevelID = value;
					this.SendPropertyChanged("TextLevelID");
					this.OnTextLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextSecurityID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TextSecurityID
		{
			get
			{
				return this._TextSecurityID;
			}
			set
			{
				if ((this._TextSecurityID != value))
				{
					if (this._TextSecurity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextSecurityIDChanging(value);
					this.SendPropertyChanging();
					this._TextSecurityID = value;
					this.SendPropertyChanged("TextSecurityID");
					this.OnTextSecurityIDChanged();
				}
			}
		}
		
		[Column(Storage="_NeedTreated", DbType="Bit NOT NULL")]
		public bool NeedTreated
		{
			get
			{
				return this._NeedTreated;
			}
			set
			{
				if ((this._NeedTreated != value))
				{
					this.OnNeedTreatedChanging(value);
					this.SendPropertyChanging();
					this._NeedTreated = value;
					this.SendPropertyChanged("NeedTreated");
					this.OnNeedTreatedChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="Text_TextAttachment", Storage="_TextAttachments", OtherKey="TextID")]
		public EntitySet<TextAttachment> TextAttachments
		{
			get
			{
				return this._TextAttachments;
			}
			set
			{
				this._TextAttachments.Assign(value);
			}
		}
		
		[Association(Name="Text_TextInBook", Storage="_TextInBook", ThisKey="TextID", IsUnique=true, IsForeignKey=false)]
		public TextInBook TextInBook
		{
			get
			{
				return this._TextInBook.Entity;
			}
			set
			{
				TextInBook previousValue = this._TextInBook.Entity;
				if (((previousValue != value) 
							|| (this._TextInBook.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextInBook.Entity = null;
						previousValue.Text = null;
					}
					this._TextInBook.Entity = value;
					if ((value != null))
					{
						value.Text = this;
					}
					this.SendPropertyChanged("TextInBook");
				}
			}
		}
		
		[Association(Name="Text_TextInbox", Storage="_TextInboxes", OtherKey="TextID")]
		public EntitySet<TextInbox> TextInboxes
		{
			get
			{
				return this._TextInboxes;
			}
			set
			{
				this._TextInboxes.Assign(value);
			}
		}
		
		[Association(Name="DepartmentAddress_Text", Storage="_DepartmentAddress", ThisKey="DepartmentAddressID", IsForeignKey=true)]
		public DepartmentAddress DepartmentAddress
		{
			get
			{
				return this._DepartmentAddress.Entity;
			}
			set
			{
				DepartmentAddress previousValue = this._DepartmentAddress.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentAddress.Entity = null;
						previousValue.Texts.Remove(this);
					}
					this._DepartmentAddress.Entity = value;
					if ((value != null))
					{
						value.Texts.Add(this);
						this._DepartmentAddressID = value.DepartmentAddressID;
					}
					else
					{
						this._DepartmentAddressID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DepartmentAddress");
				}
			}
		}
		
		[Association(Name="TextLevel_Text", Storage="_TextLevel", ThisKey="TextLevelID", IsForeignKey=true)]
		public TextLevel TextLevel
		{
			get
			{
				return this._TextLevel.Entity;
			}
			set
			{
				TextLevel previousValue = this._TextLevel.Entity;
				if (((previousValue != value) 
							|| (this._TextLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextLevel.Entity = null;
						previousValue.Texts.Remove(this);
					}
					this._TextLevel.Entity = value;
					if ((value != null))
					{
						value.Texts.Add(this);
						this._TextLevelID = value.TextLevelID;
					}
					else
					{
						this._TextLevelID = default(System.Guid);
					}
					this.SendPropertyChanged("TextLevel");
				}
			}
		}
		
		[Association(Name="TextSecurity_Text", Storage="_TextSecurity", ThisKey="TextSecurityID", IsForeignKey=true)]
		public TextSecurity TextSecurity
		{
			get
			{
				return this._TextSecurity.Entity;
			}
			set
			{
				TextSecurity previousValue = this._TextSecurity.Entity;
				if (((previousValue != value) 
							|| (this._TextSecurity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextSecurity.Entity = null;
						previousValue.Texts.Remove(this);
					}
					this._TextSecurity.Entity = value;
					if ((value != null))
					{
						value.Texts.Add(this);
						this._TextSecurityID = value.TextSecurityID;
					}
					else
					{
						this._TextSecurityID = default(System.Guid);
					}
					this.SendPropertyChanged("TextSecurity");
				}
			}
		}
		
		[Association(Name="TypeText_Text", Storage="_TypeText", ThisKey="TypeTextID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TypeText TypeText
		{
			get
			{
				return this._TypeText.Entity;
			}
			set
			{
				TypeText previousValue = this._TypeText.Entity;
				if (((previousValue != value) 
							|| (this._TypeText.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeText.Entity = null;
						previousValue.Texts.Remove(this);
					}
					this._TypeText.Entity = value;
					if ((value != null))
					{
						value.Texts.Add(this);
						this._TypeTextID = value.TypeTextID;
					}
					else
					{
						this._TypeTextID = default(System.Guid);
					}
					this.SendPropertyChanged("TypeText");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TextAttachments(TextAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Text = this;
		}
		
		private void detach_TextAttachments(TextAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Text = null;
		}
		
		private void attach_TextInboxes(TextInbox entity)
		{
			this.SendPropertyChanging();
			entity.Text = this;
		}
		
		private void detach_TextInboxes(TextInbox entity)
		{
			this.SendPropertyChanging();
			entity.Text = null;
		}
	}
	
	[Table(Name="dbo.TextAttachment")]
	public partial class TextAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TextAttachmentID;
		
		private System.Guid _FileAttachmentID;
		
		private System.Guid _TextID;
		
		private EntityRef<FileAttachment> _FileAttachment;
		
		private EntityRef<Text> _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextAttachmentIDChanging(System.Guid value);
    partial void OnTextAttachmentIDChanged();
    partial void OnFileAttachmentIDChanging(System.Guid value);
    partial void OnFileAttachmentIDChanged();
    partial void OnTextIDChanging(System.Guid value);
    partial void OnTextIDChanged();
    #endregion
		
		public TextAttachment()
		{
			this._FileAttachment = default(EntityRef<FileAttachment>);
			this._Text = default(EntityRef<Text>);
			OnCreated();
		}
		
		[Column(Storage="_TextAttachmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TextAttachmentID
		{
			get
			{
				return this._TextAttachmentID;
			}
			set
			{
				if ((this._TextAttachmentID != value))
				{
					this.OnTextAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._TextAttachmentID = value;
					this.SendPropertyChanged("TextAttachmentID");
					this.OnTextAttachmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_FileAttachmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FileAttachmentID
		{
			get
			{
				return this._FileAttachmentID;
			}
			set
			{
				if ((this._FileAttachmentID != value))
				{
					if (this._FileAttachment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._FileAttachmentID = value;
					this.SendPropertyChanged("FileAttachmentID");
					this.OnFileAttachmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TextID
		{
			get
			{
				return this._TextID;
			}
			set
			{
				if ((this._TextID != value))
				{
					if (this._Text.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextIDChanging(value);
					this.SendPropertyChanging();
					this._TextID = value;
					this.SendPropertyChanged("TextID");
					this.OnTextIDChanged();
				}
			}
		}
		
		[Association(Name="FileAttachment_TextAttachment", Storage="_FileAttachment", ThisKey="FileAttachmentID", IsForeignKey=true)]
		public FileAttachment FileAttachment
		{
			get
			{
				return this._FileAttachment.Entity;
			}
			set
			{
				FileAttachment previousValue = this._FileAttachment.Entity;
				if (((previousValue != value) 
							|| (this._FileAttachment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileAttachment.Entity = null;
						previousValue.TextAttachments.Remove(this);
					}
					this._FileAttachment.Entity = value;
					if ((value != null))
					{
						value.TextAttachments.Add(this);
						this._FileAttachmentID = value.FileAttachmentID;
					}
					else
					{
						this._FileAttachmentID = default(System.Guid);
					}
					this.SendPropertyChanged("FileAttachment");
				}
			}
		}
		
		[Association(Name="Text_TextAttachment", Storage="_Text", ThisKey="TextID", IsForeignKey=true)]
		public Text Text
		{
			get
			{
				return this._Text.Entity;
			}
			set
			{
				Text previousValue = this._Text.Entity;
				if (((previousValue != value) 
							|| (this._Text.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Text.Entity = null;
						previousValue.TextAttachments.Remove(this);
					}
					this._Text.Entity = value;
					if ((value != null))
					{
						value.TextAttachments.Add(this);
						this._TextID = value.TextID;
					}
					else
					{
						this._TextID = default(System.Guid);
					}
					this.SendPropertyChanged("Text");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TextInBook")]
	public partial class TextInBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TextID;
		
		private System.Guid _BookID;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Text> _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextIDChanging(System.Guid value);
    partial void OnTextIDChanged();
    partial void OnBookIDChanging(System.Guid value);
    partial void OnBookIDChanged();
    #endregion
		
		public TextInBook()
		{
			this._Book = default(EntityRef<Book>);
			this._Text = default(EntityRef<Text>);
			OnCreated();
		}
		
		[Column(Storage="_TextID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TextID
		{
			get
			{
				return this._TextID;
			}
			set
			{
				if ((this._TextID != value))
				{
					if (this._Text.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextIDChanging(value);
					this.SendPropertyChanging();
					this._TextID = value;
					this.SendPropertyChanged("TextID");
					this.OnTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_BookID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BookID
		{
			get
			{
				return this._BookID;
			}
			set
			{
				if ((this._BookID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookIDChanging(value);
					this.SendPropertyChanging();
					this._BookID = value;
					this.SendPropertyChanged("BookID");
					this.OnBookIDChanged();
				}
			}
		}
		
		[Association(Name="Book_TextInBook", Storage="_Book", ThisKey="BookID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.TextInBooks.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.TextInBooks.Add(this);
						this._BookID = value.BookID;
					}
					else
					{
						this._BookID = default(System.Guid);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[Association(Name="Text_TextInBook", Storage="_Text", ThisKey="TextID", IsForeignKey=true)]
		public Text Text
		{
			get
			{
				return this._Text.Entity;
			}
			set
			{
				Text previousValue = this._Text.Entity;
				if (((previousValue != value) 
							|| (this._Text.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Text.Entity = null;
						previousValue.TextInBook = null;
					}
					this._Text.Entity = value;
					if ((value != null))
					{
						value.TextInBook = this;
						this._TextID = value.TextID;
					}
					else
					{
						this._TextID = default(System.Guid);
					}
					this.SendPropertyChanged("Text");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TextInbox")]
	public partial class TextInbox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TextInboxID;
		
		private System.Guid _TextID;
		
		private string _TextContent;
		
		private System.DateTime _DateTo;
		
		private System.DateTime _DateIssued;
		
		private System.Nullable<System.DateTime> _TreatedDate;
		
		private System.Nullable<System.DateTime> _EditedDate;
		
		private EntitySet<TextOut> _TextOuts;
		
		private EntitySet<TextTo> _TextTos;
		
		private EntityRef<Text> _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextInboxIDChanging(System.Guid value);
    partial void OnTextInboxIDChanged();
    partial void OnTextIDChanging(System.Guid value);
    partial void OnTextIDChanged();
    partial void OnTextContentChanging(string value);
    partial void OnTextContentChanged();
    partial void OnDateToChanging(System.DateTime value);
    partial void OnDateToChanged();
    partial void OnDateIssuedChanging(System.DateTime value);
    partial void OnDateIssuedChanged();
    partial void OnTreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTreatedDateChanged();
    partial void OnEditedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEditedDateChanged();
    #endregion
		
		public TextInbox()
		{
			this._TextOuts = new EntitySet<TextOut>(new Action<TextOut>(this.attach_TextOuts), new Action<TextOut>(this.detach_TextOuts));
			this._TextTos = new EntitySet<TextTo>(new Action<TextTo>(this.attach_TextTos), new Action<TextTo>(this.detach_TextTos));
			this._Text = default(EntityRef<Text>);
			OnCreated();
		}
		
		[Column(Storage="_TextInboxID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TextInboxID
		{
			get
			{
				return this._TextInboxID;
			}
			set
			{
				if ((this._TextInboxID != value))
				{
					this.OnTextInboxIDChanging(value);
					this.SendPropertyChanging();
					this._TextInboxID = value;
					this.SendPropertyChanged("TextInboxID");
					this.OnTextInboxIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TextID
		{
			get
			{
				return this._TextID;
			}
			set
			{
				if ((this._TextID != value))
				{
					if (this._Text.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextIDChanging(value);
					this.SendPropertyChanging();
					this._TextID = value;
					this.SendPropertyChanged("TextID");
					this.OnTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextContent", DbType="NVarChar(MAX)")]
		public string TextContent
		{
			get
			{
				return this._TextContent;
			}
			set
			{
				if ((this._TextContent != value))
				{
					this.OnTextContentChanging(value);
					this.SendPropertyChanging();
					this._TextContent = value;
					this.SendPropertyChanged("TextContent");
					this.OnTextContentChanged();
				}
			}
		}
		
		[Column(Storage="_DateTo", DbType="DateTime NOT NULL")]
		public System.DateTime DateTo
		{
			get
			{
				return this._DateTo;
			}
			set
			{
				if ((this._DateTo != value))
				{
					this.OnDateToChanging(value);
					this.SendPropertyChanging();
					this._DateTo = value;
					this.SendPropertyChanged("DateTo");
					this.OnDateToChanged();
				}
			}
		}
		
		[Column(Storage="_DateIssued", DbType="DateTime NOT NULL")]
		public System.DateTime DateIssued
		{
			get
			{
				return this._DateIssued;
			}
			set
			{
				if ((this._DateIssued != value))
				{
					this.OnDateIssuedChanging(value);
					this.SendPropertyChanging();
					this._DateIssued = value;
					this.SendPropertyChanged("DateIssued");
					this.OnDateIssuedChanged();
				}
			}
		}
		
		[Column(Storage="_TreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TreatedDate
		{
			get
			{
				return this._TreatedDate;
			}
			set
			{
				if ((this._TreatedDate != value))
				{
					this.OnTreatedDateChanging(value);
					this.SendPropertyChanging();
					this._TreatedDate = value;
					this.SendPropertyChanged("TreatedDate");
					this.OnTreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_EditedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EditedDate
		{
			get
			{
				return this._EditedDate;
			}
			set
			{
				if ((this._EditedDate != value))
				{
					this.OnEditedDateChanging(value);
					this.SendPropertyChanging();
					this._EditedDate = value;
					this.SendPropertyChanged("EditedDate");
					this.OnEditedDateChanged();
				}
			}
		}
		
		[Association(Name="TextInbox_TextOut", Storage="_TextOuts", OtherKey="TextInboxID")]
		public EntitySet<TextOut> TextOuts
		{
			get
			{
				return this._TextOuts;
			}
			set
			{
				this._TextOuts.Assign(value);
			}
		}
		
		[Association(Name="TextInbox_TextTo", Storage="_TextTos", OtherKey="TextInboxID")]
		public EntitySet<TextTo> TextTos
		{
			get
			{
				return this._TextTos;
			}
			set
			{
				this._TextTos.Assign(value);
			}
		}
		
		[Association(Name="Text_TextInbox", Storage="_Text", ThisKey="TextID", IsForeignKey=true)]
		public Text Text
		{
			get
			{
				return this._Text.Entity;
			}
			set
			{
				Text previousValue = this._Text.Entity;
				if (((previousValue != value) 
							|| (this._Text.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Text.Entity = null;
						previousValue.TextInboxes.Remove(this);
					}
					this._Text.Entity = value;
					if ((value != null))
					{
						value.TextInboxes.Add(this);
						this._TextID = value.TextID;
					}
					else
					{
						this._TextID = default(System.Guid);
					}
					this.SendPropertyChanged("Text");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TextOuts(TextOut entity)
		{
			this.SendPropertyChanging();
			entity.TextInbox = this;
		}
		
		private void detach_TextOuts(TextOut entity)
		{
			this.SendPropertyChanging();
			entity.TextInbox = null;
		}
		
		private void attach_TextTos(TextTo entity)
		{
			this.SendPropertyChanging();
			entity.TextInbox = this;
		}
		
		private void detach_TextTos(TextTo entity)
		{
			this.SendPropertyChanging();
			entity.TextInbox = null;
		}
	}
	
	[Table(Name="dbo.TextLevel")]
	public partial class TextLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TextLevelID;
		
		private string _TextLevelName;
		
		private int _TextLevelPoint;
		
		private string _TextLevelDescription;
		
		private string _IconUrl;
		
		private bool _IsDeleted;
		
		private EntitySet<Text> _Texts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextLevelIDChanging(System.Guid value);
    partial void OnTextLevelIDChanged();
    partial void OnTextLevelNameChanging(string value);
    partial void OnTextLevelNameChanged();
    partial void OnTextLevelPointChanging(int value);
    partial void OnTextLevelPointChanged();
    partial void OnTextLevelDescriptionChanging(string value);
    partial void OnTextLevelDescriptionChanged();
    partial void OnIconUrlChanging(string value);
    partial void OnIconUrlChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public TextLevel()
		{
			this._Texts = new EntitySet<Text>(new Action<Text>(this.attach_Texts), new Action<Text>(this.detach_Texts));
			OnCreated();
		}
		
		[Column(Storage="_TextLevelID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TextLevelID
		{
			get
			{
				return this._TextLevelID;
			}
			set
			{
				if ((this._TextLevelID != value))
				{
					this.OnTextLevelIDChanging(value);
					this.SendPropertyChanging();
					this._TextLevelID = value;
					this.SendPropertyChanged("TextLevelID");
					this.OnTextLevelIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextLevelName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TextLevelName
		{
			get
			{
				return this._TextLevelName;
			}
			set
			{
				if ((this._TextLevelName != value))
				{
					this.OnTextLevelNameChanging(value);
					this.SendPropertyChanging();
					this._TextLevelName = value;
					this.SendPropertyChanged("TextLevelName");
					this.OnTextLevelNameChanged();
				}
			}
		}
		
		[Column(Storage="_TextLevelPoint", DbType="Int NOT NULL")]
		public int TextLevelPoint
		{
			get
			{
				return this._TextLevelPoint;
			}
			set
			{
				if ((this._TextLevelPoint != value))
				{
					this.OnTextLevelPointChanging(value);
					this.SendPropertyChanging();
					this._TextLevelPoint = value;
					this.SendPropertyChanged("TextLevelPoint");
					this.OnTextLevelPointChanged();
				}
			}
		}
		
		[Column(Storage="_TextLevelDescription", DbType="NVarChar(200)")]
		public string TextLevelDescription
		{
			get
			{
				return this._TextLevelDescription;
			}
			set
			{
				if ((this._TextLevelDescription != value))
				{
					this.OnTextLevelDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TextLevelDescription = value;
					this.SendPropertyChanged("TextLevelDescription");
					this.OnTextLevelDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IconUrl", DbType="NVarChar(300)")]
		public string IconUrl
		{
			get
			{
				return this._IconUrl;
			}
			set
			{
				if ((this._IconUrl != value))
				{
					this.OnIconUrlChanging(value);
					this.SendPropertyChanging();
					this._IconUrl = value;
					this.SendPropertyChanged("IconUrl");
					this.OnIconUrlChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="TextLevel_Text", Storage="_Texts", OtherKey="TextLevelID")]
		public EntitySet<Text> Texts
		{
			get
			{
				return this._Texts;
			}
			set
			{
				this._Texts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Texts(Text entity)
		{
			this.SendPropertyChanging();
			entity.TextLevel = this;
		}
		
		private void detach_Texts(Text entity)
		{
			this.SendPropertyChanging();
			entity.TextLevel = null;
		}
	}
	
	[Table(Name="dbo.TextOut")]
	public partial class TextOut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TextOutID;
		
		private System.Guid _TextInboxID;
		
		private bool _ToGroupUser;
		
		private bool _ToStaff;
		
		private bool _ToDepartment;
		
		private System.Nullable<System.Guid> _GroupUserID;
		
		private System.Nullable<System.Guid> _DepartmentID;
		
		private System.Nullable<System.Guid> _StaffID;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<GroupUser> _GroupUser;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<TextInbox> _TextInbox;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextOutIDChanging(System.Guid value);
    partial void OnTextOutIDChanged();
    partial void OnTextInboxIDChanging(System.Guid value);
    partial void OnTextInboxIDChanged();
    partial void OnToGroupUserChanging(bool value);
    partial void OnToGroupUserChanged();
    partial void OnToStaffChanging(bool value);
    partial void OnToStaffChanged();
    partial void OnToDepartmentChanging(bool value);
    partial void OnToDepartmentChanged();
    partial void OnGroupUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupUserIDChanged();
    partial void OnDepartmentIDChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentIDChanged();
    partial void OnStaffIDChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIDChanged();
    #endregion
		
		public TextOut()
		{
			this._Department = default(EntityRef<Department>);
			this._GroupUser = default(EntityRef<GroupUser>);
			this._Staff = default(EntityRef<Staff>);
			this._TextInbox = default(EntityRef<TextInbox>);
			OnCreated();
		}
		
		[Column(Storage="_TextOutID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TextOutID
		{
			get
			{
				return this._TextOutID;
			}
			set
			{
				if ((this._TextOutID != value))
				{
					this.OnTextOutIDChanging(value);
					this.SendPropertyChanging();
					this._TextOutID = value;
					this.SendPropertyChanged("TextOutID");
					this.OnTextOutIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextInboxID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TextInboxID
		{
			get
			{
				return this._TextInboxID;
			}
			set
			{
				if ((this._TextInboxID != value))
				{
					if (this._TextInbox.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextInboxIDChanging(value);
					this.SendPropertyChanging();
					this._TextInboxID = value;
					this.SendPropertyChanged("TextInboxID");
					this.OnTextInboxIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToGroupUser", DbType="Bit NOT NULL")]
		public bool ToGroupUser
		{
			get
			{
				return this._ToGroupUser;
			}
			set
			{
				if ((this._ToGroupUser != value))
				{
					this.OnToGroupUserChanging(value);
					this.SendPropertyChanging();
					this._ToGroupUser = value;
					this.SendPropertyChanged("ToGroupUser");
					this.OnToGroupUserChanged();
				}
			}
		}
		
		[Column(Storage="_ToStaff", DbType="Bit NOT NULL")]
		public bool ToStaff
		{
			get
			{
				return this._ToStaff;
			}
			set
			{
				if ((this._ToStaff != value))
				{
					this.OnToStaffChanging(value);
					this.SendPropertyChanging();
					this._ToStaff = value;
					this.SendPropertyChanged("ToStaff");
					this.OnToStaffChanged();
				}
			}
		}
		
		[Column(Storage="_ToDepartment", DbType="Bit NOT NULL")]
		public bool ToDepartment
		{
			get
			{
				return this._ToDepartment;
			}
			set
			{
				if ((this._ToDepartment != value))
				{
					this.OnToDepartmentChanging(value);
					this.SendPropertyChanging();
					this._ToDepartment = value;
					this.SendPropertyChanged("ToDepartment");
					this.OnToDepartmentChanged();
				}
			}
		}
		
		[Column(Storage="_GroupUserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GroupUserID
		{
			get
			{
				return this._GroupUserID;
			}
			set
			{
				if ((this._GroupUserID != value))
				{
					if (this._GroupUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupUserIDChanging(value);
					this.SendPropertyChanging();
					this._GroupUserID = value;
					this.SendPropertyChanged("GroupUserID");
					this.OnGroupUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[Column(Storage="_StaffID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[Association(Name="Department_TextOut", Storage="_Department", ThisKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.TextOuts.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.TextOuts.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[Association(Name="GroupUser_TextOut", Storage="_GroupUser", ThisKey="GroupUserID", IsForeignKey=true)]
		public GroupUser GroupUser
		{
			get
			{
				return this._GroupUser.Entity;
			}
			set
			{
				GroupUser previousValue = this._GroupUser.Entity;
				if (((previousValue != value) 
							|| (this._GroupUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupUser.Entity = null;
						previousValue.TextOuts.Remove(this);
					}
					this._GroupUser.Entity = value;
					if ((value != null))
					{
						value.TextOuts.Add(this);
						this._GroupUserID = value.GroupUserID;
					}
					else
					{
						this._GroupUserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("GroupUser");
				}
			}
		}
		
		[Association(Name="Staff_TextOut", Storage="_Staff", ThisKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.TextOuts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.TextOuts.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[Association(Name="TextInbox_TextOut", Storage="_TextInbox", ThisKey="TextInboxID", IsForeignKey=true)]
		public TextInbox TextInbox
		{
			get
			{
				return this._TextInbox.Entity;
			}
			set
			{
				TextInbox previousValue = this._TextInbox.Entity;
				if (((previousValue != value) 
							|| (this._TextInbox.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextInbox.Entity = null;
						previousValue.TextOuts.Remove(this);
					}
					this._TextInbox.Entity = value;
					if ((value != null))
					{
						value.TextOuts.Add(this);
						this._TextInboxID = value.TextInboxID;
					}
					else
					{
						this._TextInboxID = default(System.Guid);
					}
					this.SendPropertyChanged("TextInbox");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TextSecurity")]
	public partial class TextSecurity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TextSecurityID;
		
		private string _TextSecurityName;
		
		private string _IconUrl;
		
		private string _Note;
		
		private bool _IsDeleted;
		
		private EntitySet<Text> _Texts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextSecurityIDChanging(System.Guid value);
    partial void OnTextSecurityIDChanged();
    partial void OnTextSecurityNameChanging(string value);
    partial void OnTextSecurityNameChanged();
    partial void OnIconUrlChanging(string value);
    partial void OnIconUrlChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public TextSecurity()
		{
			this._Texts = new EntitySet<Text>(new Action<Text>(this.attach_Texts), new Action<Text>(this.detach_Texts));
			OnCreated();
		}
		
		[Column(Storage="_TextSecurityID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TextSecurityID
		{
			get
			{
				return this._TextSecurityID;
			}
			set
			{
				if ((this._TextSecurityID != value))
				{
					this.OnTextSecurityIDChanging(value);
					this.SendPropertyChanging();
					this._TextSecurityID = value;
					this.SendPropertyChanged("TextSecurityID");
					this.OnTextSecurityIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextSecurityName", DbType="NVarChar(50)")]
		public string TextSecurityName
		{
			get
			{
				return this._TextSecurityName;
			}
			set
			{
				if ((this._TextSecurityName != value))
				{
					this.OnTextSecurityNameChanging(value);
					this.SendPropertyChanging();
					this._TextSecurityName = value;
					this.SendPropertyChanged("TextSecurityName");
					this.OnTextSecurityNameChanged();
				}
			}
		}
		
		[Column(Storage="_IconUrl", DbType="NVarChar(300)")]
		public string IconUrl
		{
			get
			{
				return this._IconUrl;
			}
			set
			{
				if ((this._IconUrl != value))
				{
					this.OnIconUrlChanging(value);
					this.SendPropertyChanging();
					this._IconUrl = value;
					this.SendPropertyChanged("IconUrl");
					this.OnIconUrlChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="TextSecurity_Text", Storage="_Texts", OtherKey="TextSecurityID")]
		public EntitySet<Text> Texts
		{
			get
			{
				return this._Texts;
			}
			set
			{
				this._Texts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Texts(Text entity)
		{
			this.SendPropertyChanging();
			entity.TextSecurity = this;
		}
		
		private void detach_Texts(Text entity)
		{
			this.SendPropertyChanging();
			entity.TextSecurity = null;
		}
	}
	
	[Table(Name="dbo.TextTo")]
	public partial class TextTo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TextToID;
		
		private System.Guid _TextInboxID;
		
		private System.Guid _StaffToID;
		
		private System.Guid _StaffFromID;
		
		private bool _IsNew;
		
		private System.Guid _StateTextToID;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
		private EntityRef<StateTextTo> _StateTextTo;
		
		private EntityRef<TextInbox> _TextInbox;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTextToIDChanging(System.Guid value);
    partial void OnTextToIDChanged();
    partial void OnTextInboxIDChanging(System.Guid value);
    partial void OnTextInboxIDChanged();
    partial void OnStaffToIDChanging(System.Guid value);
    partial void OnStaffToIDChanged();
    partial void OnStaffFromIDChanging(System.Guid value);
    partial void OnStaffFromIDChanged();
    partial void OnIsNewChanging(bool value);
    partial void OnIsNewChanged();
    partial void OnStateTextToIDChanging(System.Guid value);
    partial void OnStateTextToIDChanged();
    #endregion
		
		public TextTo()
		{
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			this._StateTextTo = default(EntityRef<StateTextTo>);
			this._TextInbox = default(EntityRef<TextInbox>);
			OnCreated();
		}
		
		[Column(Storage="_TextToID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TextToID
		{
			get
			{
				return this._TextToID;
			}
			set
			{
				if ((this._TextToID != value))
				{
					this.OnTextToIDChanging(value);
					this.SendPropertyChanging();
					this._TextToID = value;
					this.SendPropertyChanged("TextToID");
					this.OnTextToIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextInboxID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TextInboxID
		{
			get
			{
				return this._TextInboxID;
			}
			set
			{
				if ((this._TextInboxID != value))
				{
					if (this._TextInbox.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTextInboxIDChanging(value);
					this.SendPropertyChanging();
					this._TextInboxID = value;
					this.SendPropertyChanged("TextInboxID");
					this.OnTextInboxIDChanged();
				}
			}
		}
		
		[Column(Storage="_StaffToID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffToID
		{
			get
			{
				return this._StaffToID;
			}
			set
			{
				if ((this._StaffToID != value))
				{
					if (this._Staff1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffToIDChanging(value);
					this.SendPropertyChanging();
					this._StaffToID = value;
					this.SendPropertyChanged("StaffToID");
					this.OnStaffToIDChanged();
				}
			}
		}
		
		[Column(Storage="_StaffFromID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffFromID
		{
			get
			{
				return this._StaffFromID;
			}
			set
			{
				if ((this._StaffFromID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffFromIDChanging(value);
					this.SendPropertyChanging();
					this._StaffFromID = value;
					this.SendPropertyChanged("StaffFromID");
					this.OnStaffFromIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsNew", DbType="Bit NOT NULL")]
		public bool IsNew
		{
			get
			{
				return this._IsNew;
			}
			set
			{
				if ((this._IsNew != value))
				{
					this.OnIsNewChanging(value);
					this.SendPropertyChanging();
					this._IsNew = value;
					this.SendPropertyChanged("IsNew");
					this.OnIsNewChanged();
				}
			}
		}
		
		[Column(Storage="_StateTextToID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StateTextToID
		{
			get
			{
				return this._StateTextToID;
			}
			set
			{
				if ((this._StateTextToID != value))
				{
					if (this._StateTextTo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateTextToIDChanging(value);
					this.SendPropertyChanging();
					this._StateTextToID = value;
					this.SendPropertyChanged("StateTextToID");
					this.OnStateTextToIDChanged();
				}
			}
		}
		
		[Association(Name="Staff_TextTo", Storage="_Staff", ThisKey="StaffFromID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.TextTos.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.TextTos.Add(this);
						this._StaffFromID = value.StaffID;
					}
					else
					{
						this._StaffFromID = default(System.Guid);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[Association(Name="Staff_TextTo1", Storage="_Staff1", ThisKey="StaffToID", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.TextTos1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.TextTos1.Add(this);
						this._StaffToID = value.StaffID;
					}
					else
					{
						this._StaffToID = default(System.Guid);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		[Association(Name="StateTextTo_TextTo", Storage="_StateTextTo", ThisKey="StateTextToID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StateTextTo StateTextTo
		{
			get
			{
				return this._StateTextTo.Entity;
			}
			set
			{
				StateTextTo previousValue = this._StateTextTo.Entity;
				if (((previousValue != value) 
							|| (this._StateTextTo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateTextTo.Entity = null;
						previousValue.TextTos.Remove(this);
					}
					this._StateTextTo.Entity = value;
					if ((value != null))
					{
						value.TextTos.Add(this);
						this._StateTextToID = value.StateTextToID;
					}
					else
					{
						this._StateTextToID = default(System.Guid);
					}
					this.SendPropertyChanged("StateTextTo");
				}
			}
		}
		
		[Association(Name="TextInbox_TextTo", Storage="_TextInbox", ThisKey="TextInboxID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TextInbox TextInbox
		{
			get
			{
				return this._TextInbox.Entity;
			}
			set
			{
				TextInbox previousValue = this._TextInbox.Entity;
				if (((previousValue != value) 
							|| (this._TextInbox.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TextInbox.Entity = null;
						previousValue.TextTos.Remove(this);
					}
					this._TextInbox.Entity = value;
					if ((value != null))
					{
						value.TextTos.Add(this);
						this._TextInboxID = value.TextInboxID;
					}
					else
					{
						this._TextInboxID = default(System.Guid);
					}
					this.SendPropertyChanged("TextInbox");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TypeCalendar")]
	public partial class TypeCalendar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TypeCalendarID;
		
		private string _TypeCalendarName;
		
		private EntitySet<CalendarWorking> _CalendarWorkings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeCalendarIDChanging(System.Guid value);
    partial void OnTypeCalendarIDChanged();
    partial void OnTypeCalendarNameChanging(string value);
    partial void OnTypeCalendarNameChanged();
    #endregion
		
		public TypeCalendar()
		{
			this._CalendarWorkings = new EntitySet<CalendarWorking>(new Action<CalendarWorking>(this.attach_CalendarWorkings), new Action<CalendarWorking>(this.detach_CalendarWorkings));
			OnCreated();
		}
		
		[Column(Storage="_TypeCalendarID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TypeCalendarID
		{
			get
			{
				return this._TypeCalendarID;
			}
			set
			{
				if ((this._TypeCalendarID != value))
				{
					this.OnTypeCalendarIDChanging(value);
					this.SendPropertyChanging();
					this._TypeCalendarID = value;
					this.SendPropertyChanged("TypeCalendarID");
					this.OnTypeCalendarIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeCalendarName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TypeCalendarName
		{
			get
			{
				return this._TypeCalendarName;
			}
			set
			{
				if ((this._TypeCalendarName != value))
				{
					this.OnTypeCalendarNameChanging(value);
					this.SendPropertyChanging();
					this._TypeCalendarName = value;
					this.SendPropertyChanged("TypeCalendarName");
					this.OnTypeCalendarNameChanged();
				}
			}
		}
		
		[Association(Name="TypeCalendar_CalendarWorking", Storage="_CalendarWorkings", OtherKey="TypeCalendarID")]
		public EntitySet<CalendarWorking> CalendarWorkings
		{
			get
			{
				return this._CalendarWorkings;
			}
			set
			{
				this._CalendarWorkings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CalendarWorkings(CalendarWorking entity)
		{
			this.SendPropertyChanging();
			entity.TypeCalendar = this;
		}
		
		private void detach_CalendarWorkings(CalendarWorking entity)
		{
			this.SendPropertyChanging();
			entity.TypeCalendar = null;
		}
	}
	
	[Table(Name="dbo.TypeText")]
	public partial class TypeText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TypeTextID;
		
		private string _TypeTextName;
		
		private string _TypeTextDescription;
		
		private bool _IsDeleted;
		
		private EntitySet<Text> _Texts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeTextIDChanging(System.Guid value);
    partial void OnTypeTextIDChanged();
    partial void OnTypeTextNameChanging(string value);
    partial void OnTypeTextNameChanged();
    partial void OnTypeTextDescriptionChanging(string value);
    partial void OnTypeTextDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public TypeText()
		{
			this._Texts = new EntitySet<Text>(new Action<Text>(this.attach_Texts), new Action<Text>(this.detach_Texts));
			OnCreated();
		}
		
		[Column(Storage="_TypeTextID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TypeTextID
		{
			get
			{
				return this._TypeTextID;
			}
			set
			{
				if ((this._TypeTextID != value))
				{
					this.OnTypeTextIDChanging(value);
					this.SendPropertyChanging();
					this._TypeTextID = value;
					this.SendPropertyChanged("TypeTextID");
					this.OnTypeTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeTextName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string TypeTextName
		{
			get
			{
				return this._TypeTextName;
			}
			set
			{
				if ((this._TypeTextName != value))
				{
					this.OnTypeTextNameChanging(value);
					this.SendPropertyChanging();
					this._TypeTextName = value;
					this.SendPropertyChanged("TypeTextName");
					this.OnTypeTextNameChanged();
				}
			}
		}
		
		[Column(Storage="_TypeTextDescription", DbType="NVarChar(200)")]
		public string TypeTextDescription
		{
			get
			{
				return this._TypeTextDescription;
			}
			set
			{
				if ((this._TypeTextDescription != value))
				{
					this.OnTypeTextDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TypeTextDescription = value;
					this.SendPropertyChanged("TypeTextDescription");
					this.OnTypeTextDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[Association(Name="TypeText_Text", Storage="_Texts", OtherKey="TypeTextID")]
		public EntitySet<Text> Texts
		{
			get
			{
				return this._Texts;
			}
			set
			{
				this._Texts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Texts(Text entity)
		{
			this.SendPropertyChanging();
			entity.TypeText = this;
		}
		
		private void detach_Texts(Text entity)
		{
			this.SendPropertyChanging();
			entity.TypeText = null;
		}
	}
	
	[Table(Name="dbo.[Work]")]
	public partial class Work : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WorkID;
		
		private string _WorkName;
		
		private string _WorkDetails;
		
		private System.DateTime _DateWorkStart;
		
		private System.DateTime _DateWorkEnd;
		
		private string _Note;
		
		private EntitySet<CalendarWorking> _CalendarWorkings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkIDChanging(System.Guid value);
    partial void OnWorkIDChanged();
    partial void OnWorkNameChanging(string value);
    partial void OnWorkNameChanged();
    partial void OnWorkDetailsChanging(string value);
    partial void OnWorkDetailsChanged();
    partial void OnDateWorkStartChanging(System.DateTime value);
    partial void OnDateWorkStartChanged();
    partial void OnDateWorkEndChanging(System.DateTime value);
    partial void OnDateWorkEndChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Work()
		{
			this._CalendarWorkings = new EntitySet<CalendarWorking>(new Action<CalendarWorking>(this.attach_CalendarWorkings), new Action<CalendarWorking>(this.detach_CalendarWorkings));
			OnCreated();
		}
		
		[Column(Storage="_WorkID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WorkID
		{
			get
			{
				return this._WorkID;
			}
			set
			{
				if ((this._WorkID != value))
				{
					this.OnWorkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkID = value;
					this.SendPropertyChanged("WorkID");
					this.OnWorkIDChanged();
				}
			}
		}
		
		[Column(Storage="_WorkName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string WorkName
		{
			get
			{
				return this._WorkName;
			}
			set
			{
				if ((this._WorkName != value))
				{
					this.OnWorkNameChanging(value);
					this.SendPropertyChanging();
					this._WorkName = value;
					this.SendPropertyChanged("WorkName");
					this.OnWorkNameChanged();
				}
			}
		}
		
		[Column(Storage="_WorkDetails", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string WorkDetails
		{
			get
			{
				return this._WorkDetails;
			}
			set
			{
				if ((this._WorkDetails != value))
				{
					this.OnWorkDetailsChanging(value);
					this.SendPropertyChanging();
					this._WorkDetails = value;
					this.SendPropertyChanged("WorkDetails");
					this.OnWorkDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_DateWorkStart", DbType="DateTime NOT NULL")]
		public System.DateTime DateWorkStart
		{
			get
			{
				return this._DateWorkStart;
			}
			set
			{
				if ((this._DateWorkStart != value))
				{
					this.OnDateWorkStartChanging(value);
					this.SendPropertyChanging();
					this._DateWorkStart = value;
					this.SendPropertyChanged("DateWorkStart");
					this.OnDateWorkStartChanged();
				}
			}
		}
		
		[Column(Storage="_DateWorkEnd", DbType="DateTime NOT NULL")]
		public System.DateTime DateWorkEnd
		{
			get
			{
				return this._DateWorkEnd;
			}
			set
			{
				if ((this._DateWorkEnd != value))
				{
					this.OnDateWorkEndChanging(value);
					this.SendPropertyChanging();
					this._DateWorkEnd = value;
					this.SendPropertyChanged("DateWorkEnd");
					this.OnDateWorkEndChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="Work_CalendarWorking", Storage="_CalendarWorkings", OtherKey="WorkID")]
		public EntitySet<CalendarWorking> CalendarWorkings
		{
			get
			{
				return this._CalendarWorkings;
			}
			set
			{
				this._CalendarWorkings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CalendarWorkings(CalendarWorking entity)
		{
			this.SendPropertyChanging();
			entity.Work = this;
		}
		
		private void detach_CalendarWorkings(CalendarWorking entity)
		{
			this.SendPropertyChanging();
			entity.Work = null;
		}
	}
}
#pragma warning restore 1591
